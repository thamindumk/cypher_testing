
// Generated from Cypher.g4 by ANTLR 4.13.1


#include "CypherListener.h"
#include "CypherVisitor.h"

#include "CypherParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "prog", "oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", 
      "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
      "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", "oC_Unwind", 
      "oC_Merge", "oC_MergeAction", "oC_Create", "oC_Set", "oC_SetItem", 
      "oC_Delete", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", "oC_StandaloneCall", 
      "oC_YieldItems", "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
      "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
      "oC_RelationshipDetail", "oC_Properties", "oC_RelationshipTypes", 
      "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
      "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "oC_PartialComparisonExpression", "oC_StringListNullPredicateExpression", 
      "oC_StringPredicateExpression", "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
      "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
      "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", "oC_NonArithmeticOperatorExpression", 
      "oC_ListOperatorExpression", "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
      "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
      "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", "oC_ParenthesizedExpression", 
      "oC_IdInColl", "oC_FunctionInvocation", "oC_FunctionName", "oC_ExistentialSubquery", 
      "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation", 
      "oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", "oC_Variable", 
      "oC_Literal", "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
      "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", "oC_PropertyKeyName", 
      "oC_Parameter", "oC_SchemaName", "oC_ReservedWord", "oC_SymbolicName", 
      "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "']'", 
      "':'", "'|'", "'..'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
      "'-'", "'/'", "'%'", "'^'", "'.'", "'{'", "'}'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "UNION", "ALL", "OPTIONAL", 
      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", 
      "DELETE", "REMOVE", "CALL", "YIELD", "WITH", "RETURN", "DISTINCT", 
      "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", 
      "DESC", "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", 
      "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", "END", "WHEN", "THEN", 
      "ANY", "NONE", "SINGLE", "EXISTS", "TRUE", "FALSE", "HexInteger", 
      "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", 
      "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
      "RegularDecimalReal", "StringLiteral", "EscapedChar", "CONSTRAINT", 
      "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", 
      "DROP", "FILTER", "EXTRACT", "UnescapedSymbolicName", "IdentifierStart", 
      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,127,1580,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,1,0,1,
  	0,1,0,1,1,3,1,213,8,1,1,1,1,1,3,1,217,8,1,1,1,3,1,220,8,1,1,1,3,1,223,
  	8,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,231,8,3,1,4,1,4,3,4,235,8,4,1,4,5,4,238,
  	8,4,10,4,12,4,241,9,4,1,5,1,5,1,5,1,5,3,5,247,8,5,1,5,1,5,1,5,3,5,252,
  	8,5,1,5,3,5,255,8,5,1,6,1,6,3,6,259,8,6,1,7,1,7,3,7,263,8,7,5,7,265,8,
  	7,10,7,12,7,268,9,7,1,7,1,7,1,7,3,7,273,8,7,5,7,275,8,7,10,7,12,7,278,
  	9,7,1,7,1,7,3,7,282,8,7,1,7,5,7,285,8,7,10,7,12,7,288,9,7,1,7,3,7,291,
  	8,7,1,7,3,7,294,8,7,3,7,296,8,7,1,8,1,8,3,8,300,8,8,5,8,302,8,8,10,8,
  	12,8,305,9,8,1,8,1,8,3,8,309,8,8,5,8,311,8,8,10,8,12,8,314,9,8,1,8,1,
  	8,3,8,318,8,8,4,8,320,8,8,11,8,12,8,321,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,
  	9,331,8,9,1,10,1,10,1,10,3,10,336,8,10,1,11,1,11,3,11,340,8,11,1,11,1,
  	11,3,11,344,8,11,1,11,1,11,3,11,348,8,11,1,11,3,11,351,8,11,1,12,1,12,
  	3,12,355,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,3,13,365,8,13,1,
  	13,1,13,1,13,5,13,370,8,13,10,13,12,13,373,9,13,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,14,1,14,1,14,1,14,3,14,385,8,14,1,15,1,15,3,15,389,8,15,1,15,
  	1,15,1,16,1,16,3,16,395,8,16,1,16,1,16,3,16,399,8,16,1,16,1,16,3,16,403,
  	8,16,1,16,5,16,406,8,16,10,16,12,16,409,9,16,1,17,1,17,3,17,413,8,17,
  	1,17,1,17,3,17,417,8,17,1,17,1,17,1,17,1,17,3,17,423,8,17,1,17,1,17,3,
  	17,427,8,17,1,17,1,17,1,17,1,17,3,17,433,8,17,1,17,1,17,3,17,437,8,17,
  	1,17,1,17,1,17,1,17,3,17,443,8,17,1,17,1,17,3,17,447,8,17,1,18,1,18,3,
  	18,451,8,18,1,18,1,18,3,18,455,8,18,1,18,1,18,3,18,459,8,18,1,18,1,18,
  	3,18,463,8,18,1,18,5,18,466,8,18,10,18,12,18,469,9,18,1,19,1,19,1,19,
  	1,19,3,19,475,8,19,1,19,1,19,3,19,479,8,19,1,19,5,19,482,8,19,10,19,12,
  	19,485,9,19,1,20,1,20,1,20,1,20,3,20,491,8,20,1,21,1,21,1,21,1,21,3,21,
  	497,8,21,1,21,1,21,1,21,3,21,502,8,21,1,22,1,22,1,22,1,22,3,22,508,8,
  	22,1,22,3,22,511,8,22,1,22,1,22,1,22,1,22,3,22,517,8,22,3,22,519,8,22,
  	1,23,1,23,3,23,523,8,23,1,23,1,23,3,23,527,8,23,1,23,5,23,530,8,23,10,
  	23,12,23,533,9,23,1,23,3,23,536,8,23,1,23,3,23,539,8,23,1,24,1,24,1,24,
  	1,24,1,24,3,24,546,8,24,1,24,1,24,1,25,1,25,1,25,3,25,553,8,25,1,25,3,
  	25,556,8,25,1,26,1,26,1,26,1,27,3,27,562,8,27,1,27,3,27,565,8,27,1,27,
  	1,27,1,27,1,27,3,27,571,8,27,1,27,1,27,3,27,575,8,27,1,27,1,27,3,27,579,
  	8,27,1,28,1,28,3,28,583,8,28,1,28,1,28,3,28,587,8,28,1,28,5,28,590,8,
  	28,10,28,12,28,593,9,28,1,28,1,28,3,28,597,8,28,1,28,1,28,3,28,601,8,
  	28,1,28,5,28,604,8,28,10,28,12,28,607,9,28,3,28,609,8,28,1,29,1,29,1,
  	29,1,29,1,29,1,29,1,29,3,29,618,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
  	30,3,30,627,8,30,1,30,5,30,630,8,30,10,30,12,30,633,9,30,1,31,1,31,1,
  	31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,3,33,645,8,33,1,33,3,33,648,8,33,
  	1,34,1,34,1,34,1,34,1,35,1,35,3,35,656,8,35,1,35,1,35,3,35,660,8,35,1,
  	35,5,35,663,8,35,10,35,12,35,666,9,35,1,36,1,36,3,36,670,8,36,1,36,1,
  	36,3,36,674,8,36,1,36,1,36,1,36,3,36,679,8,36,1,37,1,37,1,38,1,38,3,38,
  	685,8,38,1,38,5,38,688,8,38,10,38,12,38,691,9,38,1,38,1,38,1,38,1,38,
  	3,38,697,8,38,1,39,1,39,3,39,701,8,39,1,39,4,39,704,8,39,11,39,12,39,
  	705,1,40,1,40,3,40,710,8,40,1,40,1,40,3,40,714,8,40,3,40,716,8,40,1,40,
  	1,40,3,40,720,8,40,3,40,722,8,40,1,40,1,40,3,40,726,8,40,3,40,728,8,40,
  	1,40,1,40,1,41,1,41,3,41,734,8,41,1,41,1,41,1,42,1,42,3,42,740,8,42,1,
  	42,1,42,3,42,744,8,42,1,42,3,42,747,8,42,1,42,3,42,750,8,42,1,42,1,42,
  	3,42,754,8,42,1,42,1,42,1,42,1,42,3,42,760,8,42,1,42,1,42,3,42,764,8,
  	42,1,42,3,42,767,8,42,1,42,3,42,770,8,42,1,42,1,42,1,42,1,42,3,42,776,
  	8,42,1,42,3,42,779,8,42,1,42,3,42,782,8,42,1,42,1,42,3,42,786,8,42,1,
  	42,1,42,1,42,1,42,3,42,792,8,42,1,42,3,42,795,8,42,1,42,3,42,798,8,42,
  	1,42,1,42,3,42,802,8,42,1,43,1,43,3,43,806,8,43,1,43,1,43,3,43,810,8,
  	43,3,43,812,8,43,1,43,1,43,3,43,816,8,43,3,43,818,8,43,1,43,3,43,821,
  	8,43,1,43,1,43,3,43,825,8,43,3,43,827,8,43,1,43,1,43,1,44,1,44,3,44,833,
  	8,44,1,45,1,45,3,45,837,8,45,1,45,1,45,3,45,841,8,45,1,45,1,45,3,45,845,
  	8,45,1,45,3,45,848,8,45,1,45,5,45,851,8,45,10,45,12,45,854,9,45,1,46,
  	1,46,3,46,858,8,46,1,46,5,46,861,8,46,10,46,12,46,864,9,46,1,47,1,47,
  	3,47,868,8,47,1,47,1,47,1,48,1,48,3,48,874,8,48,1,48,1,48,3,48,878,8,
  	48,3,48,880,8,48,1,48,1,48,3,48,884,8,48,1,48,1,48,3,48,888,8,48,3,48,
  	890,8,48,3,48,892,8,48,1,49,1,49,1,50,1,50,1,51,1,51,3,51,900,8,51,1,
  	51,4,51,903,8,51,11,51,12,51,904,1,52,1,52,1,53,1,53,1,53,1,53,1,53,5,
  	53,914,8,53,10,53,12,53,917,9,53,1,54,1,54,1,54,1,54,1,54,5,54,924,8,
  	54,10,54,12,54,927,9,54,1,55,1,55,1,55,1,55,1,55,5,55,934,8,55,10,55,
  	12,55,937,9,55,1,56,1,56,3,56,941,8,56,5,56,943,8,56,10,56,12,56,946,
  	9,56,1,56,1,56,1,57,1,57,3,57,952,8,57,1,57,5,57,955,8,57,10,57,12,57,
  	958,9,57,1,58,1,58,3,58,962,8,58,1,58,1,58,1,58,3,58,967,8,58,1,58,1,
  	58,1,58,3,58,972,8,58,1,58,1,58,1,58,3,58,977,8,58,1,58,1,58,1,58,3,58,
  	982,8,58,1,58,1,58,1,58,3,58,987,8,58,1,58,3,58,990,8,58,1,59,1,59,1,
  	59,1,59,5,59,996,8,59,10,59,12,59,999,9,59,1,60,1,60,1,60,1,60,1,60,1,
  	60,1,60,1,60,1,60,1,60,3,60,1011,8,60,1,60,3,60,1014,8,60,1,60,1,60,1,
  	61,1,61,1,61,3,61,1021,8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,62,1,62,3,62,1035,8,62,1,63,1,63,3,63,1039,8,63,1,63,1,63,3,
  	63,1043,8,63,1,63,1,63,3,63,1047,8,63,1,63,1,63,3,63,1051,8,63,1,63,5,
  	63,1054,8,63,10,63,12,63,1057,9,63,1,64,1,64,3,64,1061,8,64,1,64,1,64,
  	3,64,1065,8,64,1,64,1,64,3,64,1069,8,64,1,64,1,64,3,64,1073,8,64,1,64,
  	1,64,3,64,1077,8,64,1,64,1,64,3,64,1081,8,64,1,64,5,64,1084,8,64,10,64,
  	12,64,1087,9,64,1,65,1,65,3,65,1091,8,65,1,65,1,65,3,65,1095,8,65,1,65,
  	5,65,1098,8,65,10,65,12,65,1101,9,65,1,66,1,66,1,66,3,66,1106,8,66,1,
  	66,3,66,1109,8,66,1,67,1,67,3,67,1113,8,67,1,67,1,67,3,67,1117,8,67,1,
  	67,5,67,1120,8,67,10,67,12,67,1123,9,67,1,67,3,67,1126,8,67,1,67,3,67,
  	1129,8,67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1137,8,68,1,68,1,68,3,68,
  	1141,8,68,1,68,3,68,1144,8,68,1,69,1,69,3,69,1148,8,69,1,69,1,69,1,70,
  	1,70,1,70,1,70,1,70,3,70,1157,8,70,1,70,1,70,3,70,1161,8,70,1,70,1,70,
  	3,70,1165,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1176,
  	8,70,1,71,1,71,3,71,1180,8,71,1,71,4,71,1183,8,71,11,71,12,71,1184,1,
  	71,1,71,3,71,1189,8,71,1,71,1,71,3,71,1193,8,71,1,71,4,71,1196,8,71,11,
  	71,12,71,1197,3,71,1200,8,71,1,71,3,71,1203,8,71,1,71,1,71,3,71,1207,
  	8,71,1,71,3,71,1210,8,71,1,71,3,71,1213,8,71,1,71,1,71,1,72,1,72,3,72,
  	1219,8,72,1,72,1,72,3,72,1223,8,72,1,72,1,72,3,72,1227,8,72,1,72,1,72,
  	1,73,1,73,3,73,1233,8,73,1,73,1,73,3,73,1237,8,73,1,73,1,73,3,73,1241,
  	8,73,1,73,3,73,1244,8,73,1,73,3,73,1247,8,73,1,73,1,73,1,74,1,74,3,74,
  	1253,8,74,1,74,1,74,3,74,1257,8,74,1,74,1,74,3,74,1261,8,74,3,74,1263,
  	8,74,1,74,1,74,3,74,1267,8,74,1,74,1,74,3,74,1271,8,74,3,74,1273,8,74,
  	1,74,1,74,3,74,1277,8,74,1,74,1,74,3,74,1281,8,74,1,74,1,74,1,75,1,75,
  	3,75,1287,8,75,1,75,1,75,3,75,1291,8,75,1,75,1,75,3,75,1295,8,75,1,75,
  	1,75,1,75,1,75,3,75,1301,8,75,1,75,1,75,3,75,1305,8,75,1,75,1,75,3,75,
  	1309,8,75,1,75,1,75,1,75,1,75,3,75,1315,8,75,1,75,1,75,3,75,1319,8,75,
  	1,75,1,75,3,75,1323,8,75,1,75,1,75,1,75,1,75,3,75,1329,8,75,1,75,1,75,
  	3,75,1333,8,75,1,75,1,75,3,75,1337,8,75,1,75,1,75,3,75,1341,8,75,1,76,
  	1,76,3,76,1345,8,76,1,76,3,76,1348,8,76,1,77,1,77,1,78,1,78,3,78,1354,
  	8,78,1,78,1,78,3,78,1358,8,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,
  	1,80,1,80,3,80,1370,8,80,1,80,1,80,3,80,1374,8,80,1,80,1,80,3,80,1378,
  	8,80,3,80,1380,8,80,1,80,1,80,3,80,1384,8,80,1,80,1,80,3,80,1388,8,80,
  	1,80,1,80,3,80,1392,8,80,5,80,1394,8,80,10,80,12,80,1397,9,80,3,80,1399,
  	8,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,3,82,1408,8,82,1,82,1,82,3,82,
  	1412,8,82,1,82,1,82,1,82,3,82,1417,8,82,1,82,3,82,1420,8,82,3,82,1422,
  	8,82,1,82,3,82,1425,8,82,1,82,1,82,1,83,1,83,3,83,1431,8,83,1,83,1,83,
  	3,83,1435,8,83,1,83,1,83,3,83,1439,8,83,1,83,1,83,3,83,1443,8,83,1,83,
  	1,83,3,83,1447,8,83,5,83,1449,8,83,10,83,12,83,1452,9,83,3,83,1454,8,
  	83,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,5,87,1468,
  	8,87,10,87,12,87,1471,9,87,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,3,
  	89,1481,8,89,1,90,1,90,1,91,1,91,3,91,1487,8,91,1,92,1,92,1,93,1,93,1,
  	94,1,94,3,94,1495,8,94,1,94,1,94,3,94,1499,8,94,1,94,1,94,3,94,1503,8,
  	94,1,94,1,94,3,94,1507,8,94,5,94,1509,8,94,10,94,12,94,1512,9,94,3,94,
  	1514,8,94,1,94,1,94,1,95,1,95,3,95,1520,8,95,1,95,1,95,3,95,1524,8,95,
  	1,95,1,95,3,95,1528,8,95,1,95,1,95,3,95,1532,8,95,1,95,1,95,3,95,1536,
  	8,95,1,95,1,95,3,95,1540,8,95,1,95,1,95,3,95,1544,8,95,1,95,1,95,3,95,
  	1548,8,95,5,95,1550,8,95,10,95,12,95,1553,9,95,3,95,1555,8,95,1,95,1,
  	95,1,96,1,96,1,97,1,97,1,97,3,97,1564,8,97,1,98,1,98,3,98,1568,8,98,1,
  	99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,1,103,1,103,0,0,104,
  	0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
  	50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
  	96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
  	132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
  	168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
  	204,206,0,10,1,0,68,71,1,0,18,19,1,0,93,94,1,0,95,97,1,0,105,106,5,0,
  	46,58,61,82,84,88,92,94,109,118,5,0,83,83,89,91,98,98,119,121,124,124,
  	2,0,14,14,27,30,2,0,15,15,31,34,2,0,19,19,35,45,1797,0,208,1,0,0,0,2,
  	212,1,0,0,0,4,226,1,0,0,0,6,230,1,0,0,0,8,232,1,0,0,0,10,254,1,0,0,0,
  	12,258,1,0,0,0,14,295,1,0,0,0,16,319,1,0,0,0,18,330,1,0,0,0,20,335,1,
  	0,0,0,22,339,1,0,0,0,24,352,1,0,0,0,26,362,1,0,0,0,28,384,1,0,0,0,30,
  	386,1,0,0,0,32,392,1,0,0,0,34,446,1,0,0,0,36,450,1,0,0,0,38,470,1,0,0,
  	0,40,490,1,0,0,0,42,492,1,0,0,0,44,503,1,0,0,0,46,520,1,0,0,0,48,545,
  	1,0,0,0,50,549,1,0,0,0,52,557,1,0,0,0,54,564,1,0,0,0,56,608,1,0,0,0,58,
  	617,1,0,0,0,60,619,1,0,0,0,62,634,1,0,0,0,64,638,1,0,0,0,66,642,1,0,0,
  	0,68,649,1,0,0,0,70,653,1,0,0,0,72,678,1,0,0,0,74,680,1,0,0,0,76,696,
  	1,0,0,0,78,698,1,0,0,0,80,707,1,0,0,0,82,731,1,0,0,0,84,801,1,0,0,0,86,
  	803,1,0,0,0,88,832,1,0,0,0,90,834,1,0,0,0,92,855,1,0,0,0,94,865,1,0,0,
  	0,96,871,1,0,0,0,98,893,1,0,0,0,100,895,1,0,0,0,102,897,1,0,0,0,104,906,
  	1,0,0,0,106,908,1,0,0,0,108,918,1,0,0,0,110,928,1,0,0,0,112,944,1,0,0,
  	0,114,949,1,0,0,0,116,989,1,0,0,0,118,991,1,0,0,0,120,1010,1,0,0,0,122,
  	1017,1,0,0,0,124,1034,1,0,0,0,126,1036,1,0,0,0,128,1058,1,0,0,0,130,1088,
  	1,0,0,0,132,1108,1,0,0,0,134,1110,1,0,0,0,136,1143,1,0,0,0,138,1145,1,
  	0,0,0,140,1175,1,0,0,0,142,1199,1,0,0,0,144,1216,1,0,0,0,146,1230,1,0,
  	0,0,148,1250,1,0,0,0,150,1340,1,0,0,0,152,1342,1,0,0,0,154,1349,1,0,0,
  	0,156,1351,1,0,0,0,158,1361,1,0,0,0,160,1367,1,0,0,0,162,1402,1,0,0,0,
  	164,1405,1,0,0,0,166,1428,1,0,0,0,168,1457,1,0,0,0,170,1459,1,0,0,0,172,
  	1461,1,0,0,0,174,1469,1,0,0,0,176,1472,1,0,0,0,178,1480,1,0,0,0,180,1482,
  	1,0,0,0,182,1486,1,0,0,0,184,1488,1,0,0,0,186,1490,1,0,0,0,188,1492,1,
  	0,0,0,190,1517,1,0,0,0,192,1558,1,0,0,0,194,1560,1,0,0,0,196,1567,1,0,
  	0,0,198,1569,1,0,0,0,200,1571,1,0,0,0,202,1573,1,0,0,0,204,1575,1,0,0,
  	0,206,1577,1,0,0,0,208,209,3,2,1,0,209,210,5,0,0,1,210,1,1,0,0,0,211,
  	213,5,125,0,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,219,
  	3,4,2,0,215,217,5,125,0,0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,
  	0,0,218,220,5,1,0,0,219,216,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,
  	223,5,125,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,
  	5,0,0,1,225,3,1,0,0,0,226,227,3,6,3,0,227,5,1,0,0,0,228,231,3,8,4,0,229,
  	231,3,44,22,0,230,228,1,0,0,0,230,229,1,0,0,0,231,7,1,0,0,0,232,239,3,
  	12,6,0,233,235,5,125,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,
  	0,0,236,238,3,10,5,0,237,234,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,
  	239,240,1,0,0,0,240,9,1,0,0,0,241,239,1,0,0,0,242,243,5,46,0,0,243,244,
  	5,125,0,0,244,246,5,47,0,0,245,247,5,125,0,0,246,245,1,0,0,0,246,247,
  	1,0,0,0,247,248,1,0,0,0,248,255,3,12,6,0,249,251,5,46,0,0,250,252,5,125,
  	0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,255,3,12,6,0,
  	254,242,1,0,0,0,254,249,1,0,0,0,255,11,1,0,0,0,256,259,3,14,7,0,257,259,
  	3,16,8,0,258,256,1,0,0,0,258,257,1,0,0,0,259,13,1,0,0,0,260,262,3,20,
  	10,0,261,263,5,125,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,
  	0,264,260,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,
  	269,1,0,0,0,268,266,1,0,0,0,269,296,3,52,26,0,270,272,3,20,10,0,271,273,
  	5,125,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,270,1,0,
  	0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,
  	276,1,0,0,0,279,286,3,18,9,0,280,282,5,125,0,0,281,280,1,0,0,0,281,282,
  	1,0,0,0,282,283,1,0,0,0,283,285,3,18,9,0,284,281,1,0,0,0,285,288,1,0,
  	0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,293,1,0,0,0,288,286,1,0,0,0,289,
  	291,5,125,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,294,
  	3,52,26,0,293,290,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,266,1,0,
  	0,0,295,276,1,0,0,0,296,15,1,0,0,0,297,299,3,20,10,0,298,300,5,125,0,
  	0,299,298,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,297,1,0,0,0,302,
  	305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,312,1,0,0,0,305,303,1,
  	0,0,0,306,308,3,18,9,0,307,309,5,125,0,0,308,307,1,0,0,0,308,309,1,0,
  	0,0,309,311,1,0,0,0,310,306,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,
  	313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,317,3,50,25,0,316,318,
  	5,125,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,303,1,0,
  	0,0,320,321,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,
  	324,3,14,7,0,324,17,1,0,0,0,325,331,3,30,15,0,326,331,3,26,13,0,327,331,
  	3,36,18,0,328,331,3,32,16,0,329,331,3,38,19,0,330,325,1,0,0,0,330,326,
  	1,0,0,0,330,327,1,0,0,0,330,328,1,0,0,0,330,329,1,0,0,0,331,19,1,0,0,
  	0,332,336,3,22,11,0,333,336,3,24,12,0,334,336,3,42,21,0,335,332,1,0,0,
  	0,335,333,1,0,0,0,335,334,1,0,0,0,336,21,1,0,0,0,337,338,5,48,0,0,338,
  	340,5,125,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,343,
  	5,49,0,0,342,344,5,125,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,
  	0,0,0,345,350,3,70,35,0,346,348,5,125,0,0,347,346,1,0,0,0,347,348,1,0,
  	0,0,348,349,1,0,0,0,349,351,3,68,34,0,350,347,1,0,0,0,350,351,1,0,0,0,
  	351,23,1,0,0,0,352,354,5,50,0,0,353,355,5,125,0,0,354,353,1,0,0,0,354,
  	355,1,0,0,0,355,356,1,0,0,0,356,357,3,104,52,0,357,358,5,125,0,0,358,
  	359,5,51,0,0,359,360,5,125,0,0,360,361,3,176,88,0,361,25,1,0,0,0,362,
  	364,5,52,0,0,363,365,5,125,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,
  	1,0,0,0,366,371,3,72,36,0,367,368,5,125,0,0,368,370,3,28,14,0,369,367,
  	1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,27,1,0,0,
  	0,373,371,1,0,0,0,374,375,5,53,0,0,375,376,5,125,0,0,376,377,5,49,0,0,
  	377,378,5,125,0,0,378,385,3,32,16,0,379,380,5,53,0,0,380,381,5,125,0,
  	0,381,382,5,54,0,0,382,383,5,125,0,0,383,385,3,32,16,0,384,374,1,0,0,
  	0,384,379,1,0,0,0,385,29,1,0,0,0,386,388,5,54,0,0,387,389,5,125,0,0,388,
  	387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,3,70,35,0,391,31,
  	1,0,0,0,392,394,5,55,0,0,393,395,5,125,0,0,394,393,1,0,0,0,394,395,1,
  	0,0,0,395,396,1,0,0,0,396,407,3,34,17,0,397,399,5,125,0,0,398,397,1,0,
  	0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,402,5,2,0,0,401,403,5,125,0,0,
  	402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,406,3,34,17,0,405,
  	398,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,33,1,
  	0,0,0,409,407,1,0,0,0,410,412,3,102,51,0,411,413,5,125,0,0,412,411,1,
  	0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,416,5,3,0,0,415,417,5,125,0,
  	0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,3,104,52,0,
  	419,447,1,0,0,0,420,422,3,176,88,0,421,423,5,125,0,0,422,421,1,0,0,0,
  	422,423,1,0,0,0,423,424,1,0,0,0,424,426,5,3,0,0,425,427,5,125,0,0,426,
  	425,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,3,104,52,0,429,447,
  	1,0,0,0,430,432,3,176,88,0,431,433,5,125,0,0,432,431,1,0,0,0,432,433,
  	1,0,0,0,433,434,1,0,0,0,434,436,5,4,0,0,435,437,5,125,0,0,436,435,1,0,
  	0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,439,3,104,52,0,439,447,1,0,0,
  	0,440,442,3,176,88,0,441,443,5,125,0,0,442,441,1,0,0,0,442,443,1,0,0,
  	0,443,444,1,0,0,0,444,445,3,92,46,0,445,447,1,0,0,0,446,410,1,0,0,0,446,
  	420,1,0,0,0,446,430,1,0,0,0,446,440,1,0,0,0,447,35,1,0,0,0,448,449,5,
  	56,0,0,449,451,5,125,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,452,1,0,
  	0,0,452,454,5,57,0,0,453,455,5,125,0,0,454,453,1,0,0,0,454,455,1,0,0,
  	0,455,456,1,0,0,0,456,467,3,104,52,0,457,459,5,125,0,0,458,457,1,0,0,
  	0,458,459,1,0,0,0,459,460,1,0,0,0,460,462,5,2,0,0,461,463,5,125,0,0,462,
  	461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,466,3,104,52,0,465,458,
  	1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,37,1,0,0,
  	0,469,467,1,0,0,0,470,471,5,58,0,0,471,472,5,125,0,0,472,483,3,40,20,
  	0,473,475,5,125,0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,
  	478,5,2,0,0,477,479,5,125,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,
  	1,0,0,0,480,482,3,40,20,0,481,474,1,0,0,0,482,485,1,0,0,0,483,481,1,0,
  	0,0,483,484,1,0,0,0,484,39,1,0,0,0,485,483,1,0,0,0,486,487,3,176,88,0,
  	487,488,3,92,46,0,488,491,1,0,0,0,489,491,3,102,51,0,490,486,1,0,0,0,
  	490,489,1,0,0,0,491,41,1,0,0,0,492,493,5,59,0,0,493,494,5,125,0,0,494,
  	501,3,166,83,0,495,497,5,125,0,0,496,495,1,0,0,0,496,497,1,0,0,0,497,
  	498,1,0,0,0,498,499,5,60,0,0,499,500,5,125,0,0,500,502,3,46,23,0,501,
  	496,1,0,0,0,501,502,1,0,0,0,502,43,1,0,0,0,503,504,5,59,0,0,504,507,5,
  	125,0,0,505,508,3,166,83,0,506,508,3,168,84,0,507,505,1,0,0,0,507,506,
  	1,0,0,0,508,518,1,0,0,0,509,511,5,125,0,0,510,509,1,0,0,0,510,511,1,0,
  	0,0,511,512,1,0,0,0,512,513,5,60,0,0,513,516,5,125,0,0,514,517,5,5,0,
  	0,515,517,3,46,23,0,516,514,1,0,0,0,516,515,1,0,0,0,517,519,1,0,0,0,518,
  	510,1,0,0,0,518,519,1,0,0,0,519,45,1,0,0,0,520,531,3,48,24,0,521,523,
  	5,125,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,526,5,2,
  	0,0,525,527,5,125,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,
  	528,530,3,48,24,0,529,522,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,
  	532,1,0,0,0,532,538,1,0,0,0,533,531,1,0,0,0,534,536,5,125,0,0,535,534,
  	1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,539,3,68,34,0,538,535,1,0,
  	0,0,538,539,1,0,0,0,539,47,1,0,0,0,540,541,3,170,85,0,541,542,5,125,0,
  	0,542,543,5,51,0,0,543,544,5,125,0,0,544,546,1,0,0,0,545,540,1,0,0,0,
  	545,546,1,0,0,0,546,547,1,0,0,0,547,548,3,176,88,0,548,49,1,0,0,0,549,
  	550,5,61,0,0,550,555,3,54,27,0,551,553,5,125,0,0,552,551,1,0,0,0,552,
  	553,1,0,0,0,553,554,1,0,0,0,554,556,3,68,34,0,555,552,1,0,0,0,555,556,
  	1,0,0,0,556,51,1,0,0,0,557,558,5,62,0,0,558,559,3,54,27,0,559,53,1,0,
  	0,0,560,562,5,125,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,
  	563,565,5,63,0,0,564,561,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,
  	567,5,125,0,0,567,570,3,56,28,0,568,569,5,125,0,0,569,571,3,60,30,0,570,
  	568,1,0,0,0,570,571,1,0,0,0,571,574,1,0,0,0,572,573,5,125,0,0,573,575,
  	3,62,31,0,574,572,1,0,0,0,574,575,1,0,0,0,575,578,1,0,0,0,576,577,5,125,
  	0,0,577,579,3,64,32,0,578,576,1,0,0,0,578,579,1,0,0,0,579,55,1,0,0,0,
  	580,591,5,5,0,0,581,583,5,125,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,
  	584,1,0,0,0,584,586,5,2,0,0,585,587,5,125,0,0,586,585,1,0,0,0,586,587,
  	1,0,0,0,587,588,1,0,0,0,588,590,3,58,29,0,589,582,1,0,0,0,590,593,1,0,
  	0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,609,1,0,0,0,593,591,1,0,0,0,594,
  	605,3,58,29,0,595,597,5,125,0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,
  	1,0,0,0,598,600,5,2,0,0,599,601,5,125,0,0,600,599,1,0,0,0,600,601,1,0,
  	0,0,601,602,1,0,0,0,602,604,3,58,29,0,603,596,1,0,0,0,604,607,1,0,0,0,
  	605,603,1,0,0,0,605,606,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,608,580,
  	1,0,0,0,608,594,1,0,0,0,609,57,1,0,0,0,610,611,3,104,52,0,611,612,5,125,
  	0,0,612,613,5,51,0,0,613,614,5,125,0,0,614,615,3,176,88,0,615,618,1,0,
  	0,0,616,618,3,104,52,0,617,610,1,0,0,0,617,616,1,0,0,0,618,59,1,0,0,0,
  	619,620,5,64,0,0,620,621,5,125,0,0,621,622,5,65,0,0,622,623,5,125,0,0,
  	623,631,3,66,33,0,624,626,5,2,0,0,625,627,5,125,0,0,626,625,1,0,0,0,626,
  	627,1,0,0,0,627,628,1,0,0,0,628,630,3,66,33,0,629,624,1,0,0,0,630,633,
  	1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,61,1,0,0,0,633,631,1,0,0,
  	0,634,635,5,66,0,0,635,636,5,125,0,0,636,637,3,104,52,0,637,63,1,0,0,
  	0,638,639,5,67,0,0,639,640,5,125,0,0,640,641,3,104,52,0,641,65,1,0,0,
  	0,642,647,3,104,52,0,643,645,5,125,0,0,644,643,1,0,0,0,644,645,1,0,0,
  	0,645,646,1,0,0,0,646,648,7,0,0,0,647,644,1,0,0,0,647,648,1,0,0,0,648,
  	67,1,0,0,0,649,650,5,72,0,0,650,651,5,125,0,0,651,652,3,104,52,0,652,
  	69,1,0,0,0,653,664,3,72,36,0,654,656,5,125,0,0,655,654,1,0,0,0,655,656,
  	1,0,0,0,656,657,1,0,0,0,657,659,5,2,0,0,658,660,5,125,0,0,659,658,1,0,
  	0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,663,3,72,36,0,662,655,1,0,0,0,
  	663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,71,1,0,0,0,666,664,
  	1,0,0,0,667,669,3,176,88,0,668,670,5,125,0,0,669,668,1,0,0,0,669,670,
  	1,0,0,0,670,671,1,0,0,0,671,673,5,3,0,0,672,674,5,125,0,0,673,672,1,0,
  	0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,3,74,37,0,676,679,1,0,0,0,
  	677,679,3,74,37,0,678,667,1,0,0,0,678,677,1,0,0,0,679,73,1,0,0,0,680,
  	681,3,76,38,0,681,75,1,0,0,0,682,689,3,80,40,0,683,685,5,125,0,0,684,
  	683,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,688,3,82,41,0,687,684,
  	1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,697,1,0,0,
  	0,691,689,1,0,0,0,692,693,5,6,0,0,693,694,3,76,38,0,694,695,5,7,0,0,695,
  	697,1,0,0,0,696,682,1,0,0,0,696,692,1,0,0,0,697,77,1,0,0,0,698,703,3,
  	80,40,0,699,701,5,125,0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,
  	0,0,702,704,3,82,41,0,703,700,1,0,0,0,704,705,1,0,0,0,705,703,1,0,0,0,
  	705,706,1,0,0,0,706,79,1,0,0,0,707,709,5,6,0,0,708,710,5,125,0,0,709,
  	708,1,0,0,0,709,710,1,0,0,0,710,715,1,0,0,0,711,713,3,176,88,0,712,714,
  	5,125,0,0,713,712,1,0,0,0,713,714,1,0,0,0,714,716,1,0,0,0,715,711,1,0,
  	0,0,715,716,1,0,0,0,716,721,1,0,0,0,717,719,3,92,46,0,718,720,5,125,0,
  	0,719,718,1,0,0,0,719,720,1,0,0,0,720,722,1,0,0,0,721,717,1,0,0,0,721,
  	722,1,0,0,0,722,727,1,0,0,0,723,725,3,88,44,0,724,726,5,125,0,0,725,724,
  	1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,0,727,723,1,0,0,0,727,728,1,0,0,
  	0,728,729,1,0,0,0,729,730,5,7,0,0,730,81,1,0,0,0,731,733,3,84,42,0,732,
  	734,5,125,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,736,
  	3,80,40,0,736,83,1,0,0,0,737,739,3,202,101,0,738,740,5,125,0,0,739,738,
  	1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,743,3,206,103,0,742,744,5,
  	125,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,747,3,86,
  	43,0,746,745,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,750,5,125,0,
  	0,749,748,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,753,3,206,103,0,
  	752,754,5,125,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,
  	756,3,204,102,0,756,802,1,0,0,0,757,759,3,202,101,0,758,760,5,125,0,0,
  	759,758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,763,3,206,103,0,762,
  	764,5,125,0,0,763,762,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,767,
  	3,86,43,0,766,765,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,770,5,125,
  	0,0,769,768,1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,3,206,103,
  	0,772,802,1,0,0,0,773,775,3,206,103,0,774,776,5,125,0,0,775,774,1,0,0,
  	0,775,776,1,0,0,0,776,778,1,0,0,0,777,779,3,86,43,0,778,777,1,0,0,0,778,
  	779,1,0,0,0,779,781,1,0,0,0,780,782,5,125,0,0,781,780,1,0,0,0,781,782,
  	1,0,0,0,782,783,1,0,0,0,783,785,3,206,103,0,784,786,5,125,0,0,785,784,
  	1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,788,3,204,102,0,788,802,1,
  	0,0,0,789,791,3,206,103,0,790,792,5,125,0,0,791,790,1,0,0,0,791,792,1,
  	0,0,0,792,794,1,0,0,0,793,795,3,86,43,0,794,793,1,0,0,0,794,795,1,0,0,
  	0,795,797,1,0,0,0,796,798,5,125,0,0,797,796,1,0,0,0,797,798,1,0,0,0,798,
  	799,1,0,0,0,799,800,3,206,103,0,800,802,1,0,0,0,801,737,1,0,0,0,801,757,
  	1,0,0,0,801,773,1,0,0,0,801,789,1,0,0,0,802,85,1,0,0,0,803,805,5,8,0,
  	0,804,806,5,125,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,811,1,0,0,0,807,
  	809,3,176,88,0,808,810,5,125,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,
  	812,1,0,0,0,811,807,1,0,0,0,811,812,1,0,0,0,812,817,1,0,0,0,813,815,3,
  	90,45,0,814,816,5,125,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,818,1,0,
  	0,0,817,813,1,0,0,0,817,818,1,0,0,0,818,820,1,0,0,0,819,821,3,96,48,0,
  	820,819,1,0,0,0,820,821,1,0,0,0,821,826,1,0,0,0,822,824,3,88,44,0,823,
  	825,5,125,0,0,824,823,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,822,
  	1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,828,829,5,9,0,0,829,87,1,0,0,
  	0,830,833,3,190,95,0,831,833,3,194,97,0,832,830,1,0,0,0,832,831,1,0,0,
  	0,833,89,1,0,0,0,834,836,5,10,0,0,835,837,5,125,0,0,836,835,1,0,0,0,836,
  	837,1,0,0,0,837,838,1,0,0,0,838,852,3,100,50,0,839,841,5,125,0,0,840,
  	839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,844,5,11,0,0,843,845,
  	5,10,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,847,1,0,0,0,846,848,5,125,
  	0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,851,3,100,50,
  	0,850,840,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,853,
  	91,1,0,0,0,854,852,1,0,0,0,855,862,3,94,47,0,856,858,5,125,0,0,857,856,
  	1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,861,3,94,47,0,860,857,1,0,
  	0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,93,1,0,0,0,864,
  	862,1,0,0,0,865,867,5,10,0,0,866,868,5,125,0,0,867,866,1,0,0,0,867,868,
  	1,0,0,0,868,869,1,0,0,0,869,870,3,98,49,0,870,95,1,0,0,0,871,873,5,5,
  	0,0,872,874,5,125,0,0,873,872,1,0,0,0,873,874,1,0,0,0,874,879,1,0,0,0,
  	875,877,3,184,92,0,876,878,5,125,0,0,877,876,1,0,0,0,877,878,1,0,0,0,
  	878,880,1,0,0,0,879,875,1,0,0,0,879,880,1,0,0,0,880,891,1,0,0,0,881,883,
  	5,12,0,0,882,884,5,125,0,0,883,882,1,0,0,0,883,884,1,0,0,0,884,889,1,
  	0,0,0,885,887,3,184,92,0,886,888,5,125,0,0,887,886,1,0,0,0,887,888,1,
  	0,0,0,888,890,1,0,0,0,889,885,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,
  	891,881,1,0,0,0,891,892,1,0,0,0,892,97,1,0,0,0,893,894,3,196,98,0,894,
  	99,1,0,0,0,895,896,3,196,98,0,896,101,1,0,0,0,897,902,3,140,70,0,898,
  	900,5,125,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,903,
  	3,138,69,0,902,899,1,0,0,0,903,904,1,0,0,0,904,902,1,0,0,0,904,905,1,
  	0,0,0,905,103,1,0,0,0,906,907,3,106,53,0,907,105,1,0,0,0,908,915,3,108,
  	54,0,909,910,5,125,0,0,910,911,5,73,0,0,911,912,5,125,0,0,912,914,3,108,
  	54,0,913,909,1,0,0,0,914,917,1,0,0,0,915,913,1,0,0,0,915,916,1,0,0,0,
  	916,107,1,0,0,0,917,915,1,0,0,0,918,925,3,110,55,0,919,920,5,125,0,0,
  	920,921,5,74,0,0,921,922,5,125,0,0,922,924,3,110,55,0,923,919,1,0,0,0,
  	924,927,1,0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,109,1,0,0,0,927,925,
  	1,0,0,0,928,935,3,112,56,0,929,930,5,125,0,0,930,931,5,75,0,0,931,932,
  	5,125,0,0,932,934,3,112,56,0,933,929,1,0,0,0,934,937,1,0,0,0,935,933,
  	1,0,0,0,935,936,1,0,0,0,936,111,1,0,0,0,937,935,1,0,0,0,938,940,5,76,
  	0,0,939,941,5,125,0,0,940,939,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,
  	942,938,1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,947,
  	1,0,0,0,946,944,1,0,0,0,947,948,3,114,57,0,948,113,1,0,0,0,949,956,3,
  	118,59,0,950,952,5,125,0,0,951,950,1,0,0,0,951,952,1,0,0,0,952,953,1,
  	0,0,0,953,955,3,116,58,0,954,951,1,0,0,0,955,958,1,0,0,0,956,954,1,0,
  	0,0,956,957,1,0,0,0,957,115,1,0,0,0,958,956,1,0,0,0,959,961,5,3,0,0,960,
  	962,5,125,0,0,961,960,1,0,0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,990,
  	3,118,59,0,964,966,5,13,0,0,965,967,5,125,0,0,966,965,1,0,0,0,966,967,
  	1,0,0,0,967,968,1,0,0,0,968,990,3,118,59,0,969,971,5,14,0,0,970,972,5,
  	125,0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,990,3,118,
  	59,0,974,976,5,15,0,0,975,977,5,125,0,0,976,975,1,0,0,0,976,977,1,0,0,
  	0,977,978,1,0,0,0,978,990,3,118,59,0,979,981,5,16,0,0,980,982,5,125,0,
  	0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,990,3,118,59,0,
  	984,986,5,17,0,0,985,987,5,125,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,
  	988,1,0,0,0,988,990,3,118,59,0,989,959,1,0,0,0,989,964,1,0,0,0,989,969,
  	1,0,0,0,989,974,1,0,0,0,989,979,1,0,0,0,989,984,1,0,0,0,990,117,1,0,0,
  	0,991,997,3,126,63,0,992,996,3,120,60,0,993,996,3,122,61,0,994,996,3,
  	124,62,0,995,992,1,0,0,0,995,993,1,0,0,0,995,994,1,0,0,0,996,999,1,0,
  	0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,119,1,0,0,0,999,997,1,0,0,0,1000,
  	1001,5,125,0,0,1001,1002,5,77,0,0,1002,1003,5,125,0,0,1003,1011,5,61,
  	0,0,1004,1005,5,125,0,0,1005,1006,5,78,0,0,1006,1007,5,125,0,0,1007,1011,
  	5,61,0,0,1008,1009,5,125,0,0,1009,1011,5,79,0,0,1010,1000,1,0,0,0,1010,
  	1004,1,0,0,0,1010,1008,1,0,0,0,1011,1013,1,0,0,0,1012,1014,5,125,0,0,
  	1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,1016,3,126,
  	63,0,1016,121,1,0,0,0,1017,1018,5,125,0,0,1018,1020,5,80,0,0,1019,1021,
  	5,125,0,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,
  	1023,3,126,63,0,1023,123,1,0,0,0,1024,1025,5,125,0,0,1025,1026,5,81,0,
  	0,1026,1027,5,125,0,0,1027,1035,5,82,0,0,1028,1029,5,125,0,0,1029,1030,
  	5,81,0,0,1030,1031,5,125,0,0,1031,1032,5,76,0,0,1032,1033,5,125,0,0,1033,
  	1035,5,82,0,0,1034,1024,1,0,0,0,1034,1028,1,0,0,0,1035,125,1,0,0,0,1036,
  	1055,3,128,64,0,1037,1039,5,125,0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,
  	0,1039,1040,1,0,0,0,1040,1042,5,18,0,0,1041,1043,5,125,0,0,1042,1041,
  	1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,1054,3,128,64,0,1045,
  	1047,5,125,0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,
  	1048,1050,5,19,0,0,1049,1051,5,125,0,0,1050,1049,1,0,0,0,1050,1051,1,
  	0,0,0,1051,1052,1,0,0,0,1052,1054,3,128,64,0,1053,1038,1,0,0,0,1053,1046,
  	1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,127,
  	1,0,0,0,1057,1055,1,0,0,0,1058,1085,3,130,65,0,1059,1061,5,125,0,0,1060,
  	1059,1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1064,5,5,0,0,1063,
  	1065,5,125,0,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,0,0,0,
  	1066,1084,3,130,65,0,1067,1069,5,125,0,0,1068,1067,1,0,0,0,1068,1069,
  	1,0,0,0,1069,1070,1,0,0,0,1070,1072,5,20,0,0,1071,1073,5,125,0,0,1072,
  	1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1084,3,130,65,0,
  	1075,1077,5,125,0,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,
  	0,0,1078,1080,5,21,0,0,1079,1081,5,125,0,0,1080,1079,1,0,0,0,1080,1081,
  	1,0,0,0,1081,1082,1,0,0,0,1082,1084,3,130,65,0,1083,1060,1,0,0,0,1083,
  	1068,1,0,0,0,1083,1076,1,0,0,0,1084,1087,1,0,0,0,1085,1083,1,0,0,0,1085,
  	1086,1,0,0,0,1086,129,1,0,0,0,1087,1085,1,0,0,0,1088,1099,3,132,66,0,
  	1089,1091,5,125,0,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,
  	0,0,1092,1094,5,22,0,0,1093,1095,5,125,0,0,1094,1093,1,0,0,0,1094,1095,
  	1,0,0,0,1095,1096,1,0,0,0,1096,1098,3,132,66,0,1097,1090,1,0,0,0,1098,
  	1101,1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,131,1,0,0,0,1101,
  	1099,1,0,0,0,1102,1109,3,134,67,0,1103,1105,7,1,0,0,1104,1106,5,125,0,
  	0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,1109,3,134,
  	67,0,1108,1102,1,0,0,0,1108,1103,1,0,0,0,1109,133,1,0,0,0,1110,1121,3,
  	140,70,0,1111,1113,5,125,0,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,
  	1114,1,0,0,0,1114,1120,3,136,68,0,1115,1117,5,125,0,0,1116,1115,1,0,0,
  	0,1116,1117,1,0,0,0,1117,1118,1,0,0,0,1118,1120,3,138,69,0,1119,1112,
  	1,0,0,0,1119,1116,1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,
  	1,0,0,0,1122,1128,1,0,0,0,1123,1121,1,0,0,0,1124,1126,5,125,0,0,1125,
  	1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1129,3,92,46,0,
  	1128,1125,1,0,0,0,1128,1129,1,0,0,0,1129,135,1,0,0,0,1130,1131,5,8,0,
  	0,1131,1132,3,104,52,0,1132,1133,5,9,0,0,1133,1144,1,0,0,0,1134,1136,
  	5,8,0,0,1135,1137,3,104,52,0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,
  	1138,1,0,0,0,1138,1140,5,12,0,0,1139,1141,3,104,52,0,1140,1139,1,0,0,
  	0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,1144,5,9,0,0,1143,1130,1,0,
  	0,0,1143,1134,1,0,0,0,1144,137,1,0,0,0,1145,1147,5,23,0,0,1146,1148,5,
  	125,0,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1150,
  	3,192,96,0,1150,139,1,0,0,0,1151,1176,3,178,89,0,1152,1176,3,194,97,0,
  	1153,1176,3,142,71,0,1154,1156,5,83,0,0,1155,1157,5,125,0,0,1156,1155,
  	1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,1158,1160,5,6,0,0,1159,1161,
  	5,125,0,0,1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,
  	1164,5,5,0,0,1163,1165,5,125,0,0,1164,1163,1,0,0,0,1164,1165,1,0,0,0,
  	1165,1166,1,0,0,0,1166,1176,5,7,0,0,1167,1176,3,146,73,0,1168,1176,3,
  	148,74,0,1169,1176,3,150,75,0,1170,1176,3,154,77,0,1171,1176,3,156,78,
  	0,1172,1176,3,160,80,0,1173,1176,3,164,82,0,1174,1176,3,176,88,0,1175,
  	1151,1,0,0,0,1175,1152,1,0,0,0,1175,1153,1,0,0,0,1175,1154,1,0,0,0,1175,
  	1167,1,0,0,0,1175,1168,1,0,0,0,1175,1169,1,0,0,0,1175,1170,1,0,0,0,1175,
  	1171,1,0,0,0,1175,1172,1,0,0,0,1175,1173,1,0,0,0,1175,1174,1,0,0,0,1176,
  	141,1,0,0,0,1177,1182,5,84,0,0,1178,1180,5,125,0,0,1179,1178,1,0,0,0,
  	1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,1183,3,144,72,0,1182,1179,1,
  	0,0,0,1183,1184,1,0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,1200,
  	1,0,0,0,1186,1188,5,84,0,0,1187,1189,5,125,0,0,1188,1187,1,0,0,0,1188,
  	1189,1,0,0,0,1189,1190,1,0,0,0,1190,1195,3,104,52,0,1191,1193,5,125,0,
  	0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1194,1,0,0,0,1194,1196,3,144,
  	72,0,1195,1192,1,0,0,0,1196,1197,1,0,0,0,1197,1195,1,0,0,0,1197,1198,
  	1,0,0,0,1198,1200,1,0,0,0,1199,1177,1,0,0,0,1199,1186,1,0,0,0,1200,1209,
  	1,0,0,0,1201,1203,5,125,0,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,
  	1204,1,0,0,0,1204,1206,5,85,0,0,1205,1207,5,125,0,0,1206,1205,1,0,0,0,
  	1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1210,3,104,52,0,1209,1202,1,
  	0,0,0,1209,1210,1,0,0,0,1210,1212,1,0,0,0,1211,1213,5,125,0,0,1212,1211,
  	1,0,0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,1215,5,86,0,0,1215,143,
  	1,0,0,0,1216,1218,5,87,0,0,1217,1219,5,125,0,0,1218,1217,1,0,0,0,1218,
  	1219,1,0,0,0,1219,1220,1,0,0,0,1220,1222,3,104,52,0,1221,1223,5,125,0,
  	0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,0,1224,1226,5,88,
  	0,0,1225,1227,5,125,0,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1228,
  	1,0,0,0,1228,1229,3,104,52,0,1229,145,1,0,0,0,1230,1232,5,8,0,0,1231,
  	1233,5,125,0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,
  	1234,1243,3,152,76,0,1235,1237,5,125,0,0,1236,1235,1,0,0,0,1236,1237,
  	1,0,0,0,1237,1238,1,0,0,0,1238,1240,5,11,0,0,1239,1241,5,125,0,0,1240,
  	1239,1,0,0,0,1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1244,3,104,52,0,
  	1243,1236,1,0,0,0,1243,1244,1,0,0,0,1244,1246,1,0,0,0,1245,1247,5,125,
  	0,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1248,1,0,0,0,1248,1249,5,
  	9,0,0,1249,147,1,0,0,0,1250,1252,5,8,0,0,1251,1253,5,125,0,0,1252,1251,
  	1,0,0,0,1252,1253,1,0,0,0,1253,1262,1,0,0,0,1254,1256,3,176,88,0,1255,
  	1257,5,125,0,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,
  	1258,1260,5,3,0,0,1259,1261,5,125,0,0,1260,1259,1,0,0,0,1260,1261,1,0,
  	0,0,1261,1263,1,0,0,0,1262,1254,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,
  	0,0,0,1264,1266,3,78,39,0,1265,1267,5,125,0,0,1266,1265,1,0,0,0,1266,
  	1267,1,0,0,0,1267,1272,1,0,0,0,1268,1270,3,68,34,0,1269,1271,5,125,0,
  	0,1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,1273,1,0,0,0,1272,1268,1,0,
  	0,0,1272,1273,1,0,0,0,1273,1274,1,0,0,0,1274,1276,5,11,0,0,1275,1277,
  	5,125,0,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,
  	1280,3,104,52,0,1279,1281,5,125,0,0,1280,1279,1,0,0,0,1280,1281,1,0,0,
  	0,1281,1282,1,0,0,0,1282,1283,5,9,0,0,1283,149,1,0,0,0,1284,1286,5,47,
  	0,0,1285,1287,5,125,0,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,
  	1,0,0,0,1288,1290,5,6,0,0,1289,1291,5,125,0,0,1290,1289,1,0,0,0,1290,
  	1291,1,0,0,0,1291,1292,1,0,0,0,1292,1294,3,152,76,0,1293,1295,5,125,0,
  	0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,0,0,1296,1297,5,7,
  	0,0,1297,1341,1,0,0,0,1298,1300,5,89,0,0,1299,1301,5,125,0,0,1300,1299,
  	1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,1304,5,6,0,0,1303,1305,
  	5,125,0,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,
  	1308,3,152,76,0,1307,1309,5,125,0,0,1308,1307,1,0,0,0,1308,1309,1,0,0,
  	0,1309,1310,1,0,0,0,1310,1311,5,7,0,0,1311,1341,1,0,0,0,1312,1314,5,90,
  	0,0,1313,1315,5,125,0,0,1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,
  	1,0,0,0,1316,1318,5,6,0,0,1317,1319,5,125,0,0,1318,1317,1,0,0,0,1318,
  	1319,1,0,0,0,1319,1320,1,0,0,0,1320,1322,3,152,76,0,1321,1323,5,125,0,
  	0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1324,1,0,0,0,1324,1325,5,7,
  	0,0,1325,1341,1,0,0,0,1326,1328,5,91,0,0,1327,1329,5,125,0,0,1328,1327,
  	1,0,0,0,1328,1329,1,0,0,0,1329,1330,1,0,0,0,1330,1332,5,6,0,0,1331,1333,
  	5,125,0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,0,0,1334,
  	1336,3,152,76,0,1335,1337,5,125,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,
  	0,1337,1338,1,0,0,0,1338,1339,5,7,0,0,1339,1341,1,0,0,0,1340,1284,1,0,
  	0,0,1340,1298,1,0,0,0,1340,1312,1,0,0,0,1340,1326,1,0,0,0,1341,151,1,
  	0,0,0,1342,1347,3,158,79,0,1343,1345,5,125,0,0,1344,1343,1,0,0,0,1344,
  	1345,1,0,0,0,1345,1346,1,0,0,0,1346,1348,3,68,34,0,1347,1344,1,0,0,0,
  	1347,1348,1,0,0,0,1348,153,1,0,0,0,1349,1350,3,78,39,0,1350,155,1,0,0,
  	0,1351,1353,5,6,0,0,1352,1354,5,125,0,0,1353,1352,1,0,0,0,1353,1354,1,
  	0,0,0,1354,1355,1,0,0,0,1355,1357,3,104,52,0,1356,1358,5,125,0,0,1357,
  	1356,1,0,0,0,1357,1358,1,0,0,0,1358,1359,1,0,0,0,1359,1360,5,7,0,0,1360,
  	157,1,0,0,0,1361,1362,3,176,88,0,1362,1363,5,125,0,0,1363,1364,5,80,0,
  	0,1364,1365,5,125,0,0,1365,1366,3,104,52,0,1366,159,1,0,0,0,1367,1369,
  	3,162,81,0,1368,1370,5,125,0,0,1369,1368,1,0,0,0,1369,1370,1,0,0,0,1370,
  	1371,1,0,0,0,1371,1373,5,6,0,0,1372,1374,5,125,0,0,1373,1372,1,0,0,0,
  	1373,1374,1,0,0,0,1374,1379,1,0,0,0,1375,1377,5,63,0,0,1376,1378,5,125,
  	0,0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1380,1,0,0,0,1379,1375,1,
  	0,0,0,1379,1380,1,0,0,0,1380,1398,1,0,0,0,1381,1383,3,104,52,0,1382,1384,
  	5,125,0,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,1384,1395,1,0,0,0,1385,
  	1387,5,2,0,0,1386,1388,5,125,0,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,
  	1388,1389,1,0,0,0,1389,1391,3,104,52,0,1390,1392,5,125,0,0,1391,1390,
  	1,0,0,0,1391,1392,1,0,0,0,1392,1394,1,0,0,0,1393,1385,1,0,0,0,1394,1397,
  	1,0,0,0,1395,1393,1,0,0,0,1395,1396,1,0,0,0,1396,1399,1,0,0,0,1397,1395,
  	1,0,0,0,1398,1381,1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,1400,1401,
  	5,7,0,0,1401,161,1,0,0,0,1402,1403,3,174,87,0,1403,1404,3,200,100,0,1404,
  	163,1,0,0,0,1405,1407,5,92,0,0,1406,1408,5,125,0,0,1407,1406,1,0,0,0,
  	1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1411,5,24,0,0,1410,1412,5,125,
  	0,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,1421,1,0,0,0,1413,1422,3,
  	8,4,0,1414,1419,3,70,35,0,1415,1417,5,125,0,0,1416,1415,1,0,0,0,1416,
  	1417,1,0,0,0,1417,1418,1,0,0,0,1418,1420,3,68,34,0,1419,1416,1,0,0,0,
  	1419,1420,1,0,0,0,1420,1422,1,0,0,0,1421,1413,1,0,0,0,1421,1414,1,0,0,
  	0,1422,1424,1,0,0,0,1423,1425,5,125,0,0,1424,1423,1,0,0,0,1424,1425,1,
  	0,0,0,1425,1426,1,0,0,0,1426,1427,5,25,0,0,1427,165,1,0,0,0,1428,1430,
  	3,172,86,0,1429,1431,5,125,0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,
  	1432,1,0,0,0,1432,1434,5,6,0,0,1433,1435,5,125,0,0,1434,1433,1,0,0,0,
  	1434,1435,1,0,0,0,1435,1453,1,0,0,0,1436,1438,3,104,52,0,1437,1439,5,
  	125,0,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1450,1,0,0,0,1440,1442,
  	5,2,0,0,1441,1443,5,125,0,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,
  	1444,1,0,0,0,1444,1446,3,104,52,0,1445,1447,5,125,0,0,1446,1445,1,0,0,
  	0,1446,1447,1,0,0,0,1447,1449,1,0,0,0,1448,1440,1,0,0,0,1449,1452,1,0,
  	0,0,1450,1448,1,0,0,0,1450,1451,1,0,0,0,1451,1454,1,0,0,0,1452,1450,1,
  	0,0,0,1453,1436,1,0,0,0,1453,1454,1,0,0,0,1454,1455,1,0,0,0,1455,1456,
  	5,7,0,0,1456,167,1,0,0,0,1457,1458,3,172,86,0,1458,169,1,0,0,0,1459,1460,
  	3,200,100,0,1460,171,1,0,0,0,1461,1462,3,174,87,0,1462,1463,3,200,100,
  	0,1463,173,1,0,0,0,1464,1465,3,200,100,0,1465,1466,5,23,0,0,1466,1468,
  	1,0,0,0,1467,1464,1,0,0,0,1468,1471,1,0,0,0,1469,1467,1,0,0,0,1469,1470,
  	1,0,0,0,1470,175,1,0,0,0,1471,1469,1,0,0,0,1472,1473,3,200,100,0,1473,
  	177,1,0,0,0,1474,1481,3,180,90,0,1475,1481,5,82,0,0,1476,1481,3,182,91,
  	0,1477,1481,5,107,0,0,1478,1481,3,188,94,0,1479,1481,3,190,95,0,1480,
  	1474,1,0,0,0,1480,1475,1,0,0,0,1480,1476,1,0,0,0,1480,1477,1,0,0,0,1480,
  	1478,1,0,0,0,1480,1479,1,0,0,0,1481,179,1,0,0,0,1482,1483,7,2,0,0,1483,
  	181,1,0,0,0,1484,1487,3,186,93,0,1485,1487,3,184,92,0,1486,1484,1,0,0,
  	0,1486,1485,1,0,0,0,1487,183,1,0,0,0,1488,1489,7,3,0,0,1489,185,1,0,0,
  	0,1490,1491,7,4,0,0,1491,187,1,0,0,0,1492,1494,5,8,0,0,1493,1495,5,125,
  	0,0,1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,1513,1,0,0,0,1496,1498,3,
  	104,52,0,1497,1499,5,125,0,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,
  	1510,1,0,0,0,1500,1502,5,2,0,0,1501,1503,5,125,0,0,1502,1501,1,0,0,0,
  	1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1506,3,104,52,0,1505,1507,5,
  	125,0,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1509,1,0,0,0,1508,1500,
  	1,0,0,0,1509,1512,1,0,0,0,1510,1508,1,0,0,0,1510,1511,1,0,0,0,1511,1514,
  	1,0,0,0,1512,1510,1,0,0,0,1513,1496,1,0,0,0,1513,1514,1,0,0,0,1514,1515,
  	1,0,0,0,1515,1516,5,9,0,0,1516,189,1,0,0,0,1517,1519,5,24,0,0,1518,1520,
  	5,125,0,0,1519,1518,1,0,0,0,1519,1520,1,0,0,0,1520,1554,1,0,0,0,1521,
  	1523,3,192,96,0,1522,1524,5,125,0,0,1523,1522,1,0,0,0,1523,1524,1,0,0,
  	0,1524,1525,1,0,0,0,1525,1527,5,10,0,0,1526,1528,5,125,0,0,1527,1526,
  	1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,0,0,0,1529,1531,3,104,52,0,1530,
  	1532,5,125,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1551,1,0,0,0,
  	1533,1535,5,2,0,0,1534,1536,5,125,0,0,1535,1534,1,0,0,0,1535,1536,1,0,
  	0,0,1536,1537,1,0,0,0,1537,1539,3,192,96,0,1538,1540,5,125,0,0,1539,1538,
  	1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,1543,5,10,0,0,1542,1544,
  	5,125,0,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,0,0,0,1545,
  	1547,3,104,52,0,1546,1548,5,125,0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,
  	0,1548,1550,1,0,0,0,1549,1533,1,0,0,0,1550,1553,1,0,0,0,1551,1549,1,0,
  	0,0,1551,1552,1,0,0,0,1552,1555,1,0,0,0,1553,1551,1,0,0,0,1554,1521,1,
  	0,0,0,1554,1555,1,0,0,0,1555,1556,1,0,0,0,1556,1557,5,25,0,0,1557,191,
  	1,0,0,0,1558,1559,3,196,98,0,1559,193,1,0,0,0,1560,1563,5,26,0,0,1561,
  	1564,3,200,100,0,1562,1564,5,96,0,0,1563,1561,1,0,0,0,1563,1562,1,0,0,
  	0,1564,195,1,0,0,0,1565,1568,3,200,100,0,1566,1568,3,198,99,0,1567,1565,
  	1,0,0,0,1567,1566,1,0,0,0,1568,197,1,0,0,0,1569,1570,7,5,0,0,1570,199,
  	1,0,0,0,1571,1572,7,6,0,0,1572,201,1,0,0,0,1573,1574,7,7,0,0,1574,203,
  	1,0,0,0,1575,1576,7,8,0,0,1576,205,1,0,0,0,1577,1578,7,9,0,0,1578,207,
  	1,0,0,0,291,212,216,219,222,230,234,239,246,251,254,258,262,266,272,276,
  	281,286,290,293,295,299,303,308,312,317,321,330,335,339,343,347,350,354,
  	364,371,384,388,394,398,402,407,412,416,422,426,432,436,442,446,450,454,
  	458,462,467,474,478,483,490,496,501,507,510,516,518,522,526,531,535,538,
  	545,552,555,561,564,570,574,578,582,586,591,596,600,605,608,617,626,631,
  	644,647,655,659,664,669,673,678,684,689,696,700,705,709,713,715,719,721,
  	725,727,733,739,743,746,749,753,759,763,766,769,775,778,781,785,791,794,
  	797,801,805,809,811,815,817,820,824,826,832,836,840,844,847,852,857,862,
  	867,873,877,879,883,887,889,891,899,904,915,925,935,940,944,951,956,961,
  	966,971,976,981,986,989,995,997,1010,1013,1020,1034,1038,1042,1046,1050,
  	1053,1055,1060,1064,1068,1072,1076,1080,1083,1085,1090,1094,1099,1105,
  	1108,1112,1116,1119,1121,1125,1128,1136,1140,1143,1147,1156,1160,1164,
  	1175,1179,1184,1188,1192,1197,1199,1202,1206,1209,1212,1218,1222,1226,
  	1232,1236,1240,1243,1246,1252,1256,1260,1262,1266,1270,1272,1276,1280,
  	1286,1290,1294,1300,1304,1308,1314,1318,1322,1328,1332,1336,1340,1344,
  	1347,1353,1357,1369,1373,1377,1379,1383,1387,1391,1395,1398,1407,1411,
  	1416,1419,1421,1424,1430,1434,1438,1442,1446,1450,1453,1469,1480,1486,
  	1494,1498,1502,1506,1510,1513,1519,1523,1527,1531,1535,1539,1543,1547,
  	1551,1554,1563,1567
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- ProgContext ------------------------------------------------------------------

CypherParser::ProgContext::ProgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CypherContext* CypherParser::ProgContext::oC_Cypher() {
  return getRuleContext<CypherParser::OC_CypherContext>(0);
}

tree::TerminalNode* CypherParser::ProgContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}


size_t CypherParser::ProgContext::getRuleIndex() const {
  return CypherParser::RuleProg;
}

void CypherParser::ProgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProg(this);
}

void CypherParser::ProgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProg(this);
}


std::any CypherParser::ProgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitProg(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::ProgContext* CypherParser::prog() {
  ProgContext *_localctx = _tracker.createInstance<ProgContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleProg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(208);
    oC_Cypher();
    setState(209);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

tree::TerminalNode* CypherParser::OC_CypherContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}

void CypherParser::OC_CypherContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Cypher(this);
}

void CypherParser::OC_CypherContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Cypher(this);
}


std::any CypherParser::OC_CypherContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Cypher(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(212);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(211);
      match(CypherParser::SP);
    }
    setState(214);
    oC_Statement();
    setState(219);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      setState(216);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(215);
        match(CypherParser::SP);
      }
      setState(218);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
    setState(222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(221);
      match(CypherParser::SP);
    }
    setState(224);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}

void CypherParser::OC_StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Statement(this);
}

void CypherParser::OC_StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Statement(this);
}


std::any CypherParser::OC_StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Statement(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(226);
    oC_Query();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}

CypherParser::OC_StandaloneCallContext* CypherParser::OC_QueryContext::oC_StandaloneCall() {
  return getRuleContext<CypherParser::OC_StandaloneCallContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}

void CypherParser::OC_QueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Query(this);
}

void CypherParser::OC_QueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Query(this);
}


std::any CypherParser::OC_QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Query(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(230);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(228);
      oC_RegularQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(229);
      oC_StandaloneCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}

void CypherParser::OC_RegularQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RegularQuery(this);
}

void CypherParser::OC_RegularQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RegularQuery(this);
}


std::any CypherParser::OC_RegularQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RegularQuery(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(232);
    oC_SingleQuery();
    setState(239);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(234);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(233);
          match(CypherParser::SP);
        }
        setState(236);
        oC_Union(); 
      }
      setState(241);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}

void CypherParser::OC_UnionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Union(this);
}

void CypherParser::OC_UnionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Union(this);
}


std::any CypherParser::OC_UnionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Union(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(254);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(242);
      match(CypherParser::UNION);
      setState(243);
      match(CypherParser::SP);
      setState(244);
      match(CypherParser::ALL);
      setState(246);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(245);
        match(CypherParser::SP);
      }
      setState(248);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(249);
      match(CypherParser::UNION);
      setState(251);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(250);
        match(CypherParser::SP);
      }
      setState(253);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}

void CypherParser::OC_SingleQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_SingleQuery(this);
}

void CypherParser::OC_SingleQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_SingleQuery(this);
}


std::any CypherParser::OC_SingleQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_SingleQuery(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(258);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(256);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(257);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}

void CypherParser::OC_SinglePartQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_SinglePartQuery(this);
}

void CypherParser::OC_SinglePartQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_SinglePartQuery(this);
}


std::any CypherParser::OC_SinglePartQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_SinglePartQuery(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(295);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(266);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 578431077140398080) != 0)) {
        setState(260);
        oC_ReadingClause();
        setState(262);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(261);
          match(CypherParser::SP);
        }
        setState(268);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(269);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(276);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 578431077140398080) != 0)) {
        setState(270);
        oC_ReadingClause();
        setState(272);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(271);
          match(CypherParser::SP);
        }
        setState(278);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(279);
      oC_UpdatingClause();
      setState(286);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(281);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(280);
            match(CypherParser::SP);
          }
          setState(283);
          oC_UpdatingClause(); 
        }
        setState(288);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
      }
      setState(293);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
      case 1: {
        setState(290);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(289);
          match(CypherParser::SP);
        }
        setState(292);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::OC_WithContext *> CypherParser::OC_MultiPartQueryContext::oC_With() {
  return getRuleContexts<CypherParser::OC_WithContext>();
}

CypherParser::OC_WithContext* CypherParser::OC_MultiPartQueryContext::oC_With(size_t i) {
  return getRuleContext<CypherParser::OC_WithContext>(i);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_MultiPartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_MultiPartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_MultiPartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_MultiPartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}

void CypherParser::OC_MultiPartQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_MultiPartQuery(this);
}

void CypherParser::OC_MultiPartQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_MultiPartQuery(this);
}


std::any CypherParser::OC_MultiPartQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_MultiPartQuery(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(319); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(303);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while ((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 578431077140398080) != 0)) {
                setState(297);
                oC_ReadingClause();
                setState(299);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(298);
                  match(CypherParser::SP);
                }
                setState(305);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(312);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while ((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 562949953421312000) != 0)) {
                setState(306);
                oC_UpdatingClause();
                setState(308);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(307);
                  match(CypherParser::SP);
                }
                setState(314);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(315);
              oC_With();
              setState(317);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(316);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(321); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(323);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_RemoveContext* CypherParser::OC_UpdatingClauseContext::oC_Remove() {
  return getRuleContext<CypherParser::OC_RemoveContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}

void CypherParser::OC_UpdatingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_UpdatingClause(this);
}

void CypherParser::OC_UpdatingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_UpdatingClause(this);
}


std::any CypherParser::OC_UpdatingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_UpdatingClause(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(330);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(325);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(326);
        oC_Merge();
        break;
      }

      case CypherParser::DETACH:
      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 3);
        setState(327);
        oC_Delete();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 4);
        setState(328);
        oC_Set();
        break;
      }

      case CypherParser::REMOVE: {
        enterOuterAlt(_localctx, 5);
        setState(329);
        oC_Remove();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::OC_InQueryCallContext* CypherParser::OC_ReadingClauseContext::oC_InQueryCall() {
  return getRuleContext<CypherParser::OC_InQueryCallContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}

void CypherParser::OC_ReadingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ReadingClause(this);
}

void CypherParser::OC_ReadingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ReadingClause(this);
}


std::any CypherParser::OC_ReadingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReadingClause(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(335);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(332);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(333);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(334);
        oC_InQueryCall();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}

void CypherParser::OC_MatchContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Match(this);
}

void CypherParser::OC_MatchContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Match(this);
}


std::any CypherParser::OC_MatchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Match(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(337);
      match(CypherParser::OPTIONAL);
      setState(338);
      match(CypherParser::SP);
    }
    setState(341);
    match(CypherParser::MATCH);
    setState(343);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(342);
      match(CypherParser::SP);
    }
    setState(345);
    oC_Pattern();
    setState(350);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(347);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(346);
        match(CypherParser::SP);
      }
      setState(349);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}

void CypherParser::OC_UnwindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Unwind(this);
}

void CypherParser::OC_UnwindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Unwind(this);
}


std::any CypherParser::OC_UnwindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Unwind(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(CypherParser::UNWIND);
    setState(354);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(353);
      match(CypherParser::SP);
    }
    setState(356);
    oC_Expression();
    setState(357);
    match(CypherParser::SP);
    setState(358);
    match(CypherParser::AS);
    setState(359);
    match(CypherParser::SP);
    setState(360);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternPartContext* CypherParser::OC_MergeContext::oC_PatternPart() {
  return getRuleContext<CypherParser::OC_PatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}

void CypherParser::OC_MergeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Merge(this);
}

void CypherParser::OC_MergeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Merge(this);
}


std::any CypherParser::OC_MergeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Merge(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(362);
    match(CypherParser::MERGE);
    setState(364);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(363);
      match(CypherParser::SP);
    }
    setState(366);
    oC_PatternPart();
    setState(371);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(367);
        match(CypherParser::SP);
        setState(368);
        oC_MergeAction(); 
      }
      setState(373);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}

void CypherParser::OC_MergeActionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_MergeAction(this);
}

void CypherParser::OC_MergeActionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_MergeAction(this);
}


std::any CypherParser::OC_MergeActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_MergeAction(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(384);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(374);
      match(CypherParser::ON);
      setState(375);
      match(CypherParser::SP);
      setState(376);
      match(CypherParser::MATCH);
      setState(377);
      match(CypherParser::SP);
      setState(378);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(379);
      match(CypherParser::ON);
      setState(380);
      match(CypherParser::SP);
      setState(381);
      match(CypherParser::CREATE);
      setState(382);
      match(CypherParser::SP);
      setState(383);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}

void CypherParser::OC_CreateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Create(this);
}

void CypherParser::OC_CreateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Create(this);
}


std::any CypherParser::OC_CreateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Create(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    match(CypherParser::CREATE);
    setState(388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(387);
      match(CypherParser::SP);
    }
    setState(390);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}

void CypherParser::OC_SetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Set(this);
}

void CypherParser::OC_SetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Set(this);
}


std::any CypherParser::OC_SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Set(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(392);
    match(CypherParser::SET);
    setState(394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(393);
      match(CypherParser::SP);
    }
    setState(396);
    oC_SetItem();
    setState(407);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(398);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(397);
          match(CypherParser::SP);
        }
        setState(400);
        match(CypherParser::T__1);
        setState(402);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(401);
          match(CypherParser::SP);
        }
        setState(404);
        oC_SetItem(); 
      }
      setState(409);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_SetItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_SetItemContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}

void CypherParser::OC_SetItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_SetItem(this);
}

void CypherParser::OC_SetItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_SetItem(this);
}


std::any CypherParser::OC_SetItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_SetItem(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(446);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(410);
      oC_PropertyExpression();
      setState(412);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(411);
        match(CypherParser::SP);
      }
      setState(414);
      match(CypherParser::T__2);
      setState(416);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(415);
        match(CypherParser::SP);
      }
      setState(418);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(420);
      oC_Variable();
      setState(422);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(421);
        match(CypherParser::SP);
      }
      setState(424);
      match(CypherParser::T__2);
      setState(426);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(425);
        match(CypherParser::SP);
      }
      setState(428);
      oC_Expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(430);
      oC_Variable();
      setState(432);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(431);
        match(CypherParser::SP);
      }
      setState(434);
      match(CypherParser::T__3);
      setState(436);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(435);
        match(CypherParser::SP);
      }
      setState(438);
      oC_Expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(440);
      oC_Variable();
      setState(442);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(441);
        match(CypherParser::SP);
      }
      setState(444);
      oC_NodeLabels();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}

void CypherParser::OC_DeleteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Delete(this);
}

void CypherParser::OC_DeleteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Delete(this);
}


std::any CypherParser::OC_DeleteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Delete(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(448);
      match(CypherParser::DETACH);
      setState(449);
      match(CypherParser::SP);
    }
    setState(452);
    match(CypherParser::DELETE);
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(453);
      match(CypherParser::SP);
    }
    setState(456);
    oC_Expression();
    setState(467);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(458);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(457);
          match(CypherParser::SP);
        }
        setState(460);
        match(CypherParser::T__1);
        setState(462);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(461);
          match(CypherParser::SP);
        }
        setState(464);
        oC_Expression(); 
      }
      setState(469);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RemoveContext ------------------------------------------------------------------

CypherParser::OC_RemoveContext::OC_RemoveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RemoveContext::REMOVE() {
  return getToken(CypherParser::REMOVE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RemoveContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RemoveContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_RemoveItemContext *> CypherParser::OC_RemoveContext::oC_RemoveItem() {
  return getRuleContexts<CypherParser::OC_RemoveItemContext>();
}

CypherParser::OC_RemoveItemContext* CypherParser::OC_RemoveContext::oC_RemoveItem(size_t i) {
  return getRuleContext<CypherParser::OC_RemoveItemContext>(i);
}


size_t CypherParser::OC_RemoveContext::getRuleIndex() const {
  return CypherParser::RuleOC_Remove;
}

void CypherParser::OC_RemoveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Remove(this);
}

void CypherParser::OC_RemoveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Remove(this);
}


std::any CypherParser::OC_RemoveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Remove(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RemoveContext* CypherParser::oC_Remove() {
  OC_RemoveContext *_localctx = _tracker.createInstance<OC_RemoveContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleOC_Remove);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(470);
    match(CypherParser::REMOVE);
    setState(471);
    match(CypherParser::SP);
    setState(472);
    oC_RemoveItem();
    setState(483);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(474);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(473);
          match(CypherParser::SP);
        }
        setState(476);
        match(CypherParser::T__1);
        setState(478);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(477);
          match(CypherParser::SP);
        }
        setState(480);
        oC_RemoveItem(); 
      }
      setState(485);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RemoveItemContext ------------------------------------------------------------------

CypherParser::OC_RemoveItemContext::OC_RemoveItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_RemoveItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_RemoveItemContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_RemoveItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}


size_t CypherParser::OC_RemoveItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_RemoveItem;
}

void CypherParser::OC_RemoveItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RemoveItem(this);
}

void CypherParser::OC_RemoveItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RemoveItem(this);
}


std::any CypherParser::OC_RemoveItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RemoveItem(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RemoveItemContext* CypherParser::oC_RemoveItem() {
  OC_RemoveItemContext *_localctx = _tracker.createInstance<OC_RemoveItemContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleOC_RemoveItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(490);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(486);
      oC_Variable();
      setState(487);
      oC_NodeLabels();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(489);
      oC_PropertyExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_InQueryCallContext ------------------------------------------------------------------

CypherParser::OC_InQueryCallContext::OC_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExplicitProcedureInvocationContext* CypherParser::OC_InQueryCallContext::oC_ExplicitProcedureInvocation() {
  return getRuleContext<CypherParser::OC_ExplicitProcedureInvocationContext>(0);
}

tree::TerminalNode* CypherParser::OC_InQueryCallContext::YIELD() {
  return getToken(CypherParser::YIELD, 0);
}

CypherParser::OC_YieldItemsContext* CypherParser::OC_InQueryCallContext::oC_YieldItems() {
  return getRuleContext<CypherParser::OC_YieldItemsContext>(0);
}


size_t CypherParser::OC_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleOC_InQueryCall;
}

void CypherParser::OC_InQueryCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_InQueryCall(this);
}

void CypherParser::OC_InQueryCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_InQueryCall(this);
}


std::any CypherParser::OC_InQueryCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_InQueryCall(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_InQueryCallContext* CypherParser::oC_InQueryCall() {
  OC_InQueryCallContext *_localctx = _tracker.createInstance<OC_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleOC_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(492);
    match(CypherParser::CALL);
    setState(493);
    match(CypherParser::SP);
    setState(494);
    oC_ExplicitProcedureInvocation();
    setState(501);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(496);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(495);
        match(CypherParser::SP);
      }
      setState(498);
      match(CypherParser::YIELD);
      setState(499);
      match(CypherParser::SP);
      setState(500);
      oC_YieldItems();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StandaloneCallContext ------------------------------------------------------------------

CypherParser::OC_StandaloneCallContext::OC_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExplicitProcedureInvocationContext* CypherParser::OC_StandaloneCallContext::oC_ExplicitProcedureInvocation() {
  return getRuleContext<CypherParser::OC_ExplicitProcedureInvocationContext>(0);
}

CypherParser::OC_ImplicitProcedureInvocationContext* CypherParser::OC_StandaloneCallContext::oC_ImplicitProcedureInvocation() {
  return getRuleContext<CypherParser::OC_ImplicitProcedureInvocationContext>(0);
}

tree::TerminalNode* CypherParser::OC_StandaloneCallContext::YIELD() {
  return getToken(CypherParser::YIELD, 0);
}

CypherParser::OC_YieldItemsContext* CypherParser::OC_StandaloneCallContext::oC_YieldItems() {
  return getRuleContext<CypherParser::OC_YieldItemsContext>(0);
}


size_t CypherParser::OC_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleOC_StandaloneCall;
}

void CypherParser::OC_StandaloneCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_StandaloneCall(this);
}

void CypherParser::OC_StandaloneCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_StandaloneCall(this);
}


std::any CypherParser::OC_StandaloneCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_StandaloneCall(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_StandaloneCallContext* CypherParser::oC_StandaloneCall() {
  OC_StandaloneCallContext *_localctx = _tracker.createInstance<OC_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleOC_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(503);
    match(CypherParser::CALL);
    setState(504);
    match(CypherParser::SP);
    setState(507);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      setState(505);
      oC_ExplicitProcedureInvocation();
      break;
    }

    case 2: {
      setState(506);
      oC_ImplicitProcedureInvocation();
      break;
    }

    default:
      break;
    }
    setState(518);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(510);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(509);
        match(CypherParser::SP);
      }
      setState(512);
      match(CypherParser::YIELD);
      setState(513);
      match(CypherParser::SP);
      setState(516);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CypherParser::T__4: {
          setState(514);
          match(CypherParser::T__4);
          break;
        }

        case CypherParser::COUNT:
        case CypherParser::ANY:
        case CypherParser::NONE:
        case CypherParser::SINGLE:
        case CypherParser::HexLetter:
        case CypherParser::FILTER:
        case CypherParser::EXTRACT:
        case CypherParser::UnescapedSymbolicName:
        case CypherParser::EscapedSymbolicName: {
          setState(515);
          oC_YieldItems();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemsContext ------------------------------------------------------------------

CypherParser::OC_YieldItemsContext::OC_YieldItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_YieldItemContext *> CypherParser::OC_YieldItemsContext::oC_YieldItem() {
  return getRuleContexts<CypherParser::OC_YieldItemContext>();
}

CypherParser::OC_YieldItemContext* CypherParser::OC_YieldItemsContext::oC_YieldItem(size_t i) {
  return getRuleContext<CypherParser::OC_YieldItemContext>(i);
}

CypherParser::OC_WhereContext* CypherParser::OC_YieldItemsContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_YieldItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_YieldItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_YieldItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_YieldItems;
}

void CypherParser::OC_YieldItemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_YieldItems(this);
}

void CypherParser::OC_YieldItemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_YieldItems(this);
}


std::any CypherParser::OC_YieldItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_YieldItems(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_YieldItemsContext* CypherParser::oC_YieldItems() {
  OC_YieldItemsContext *_localctx = _tracker.createInstance<OC_YieldItemsContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleOC_YieldItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(520);
    oC_YieldItem();
    setState(531);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(522);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(521);
          match(CypherParser::SP);
        }
        setState(524);
        match(CypherParser::T__1);
        setState(526);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(525);
          match(CypherParser::SP);
        }
        setState(528);
        oC_YieldItem(); 
      }
      setState(533);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    }
    setState(538);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      setState(535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(534);
        match(CypherParser::SP);
      }
      setState(537);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemContext ------------------------------------------------------------------

CypherParser::OC_YieldItemContext::OC_YieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_YieldItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_ProcedureResultFieldContext* CypherParser::OC_YieldItemContext::oC_ProcedureResultField() {
  return getRuleContext<CypherParser::OC_ProcedureResultFieldContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_YieldItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_YieldItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_YieldItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}


size_t CypherParser::OC_YieldItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_YieldItem;
}

void CypherParser::OC_YieldItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_YieldItem(this);
}

void CypherParser::OC_YieldItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_YieldItem(this);
}


std::any CypherParser::OC_YieldItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_YieldItem(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_YieldItemContext* CypherParser::oC_YieldItem() {
  OC_YieldItemContext *_localctx = _tracker.createInstance<OC_YieldItemContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleOC_YieldItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(545);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      setState(540);
      oC_ProcedureResultField();
      setState(541);
      match(CypherParser::SP);
      setState(542);
      match(CypherParser::AS);
      setState(543);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(547);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}

void CypherParser::OC_WithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_With(this);
}

void CypherParser::OC_WithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_With(this);
}


std::any CypherParser::OC_WithContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_With(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(549);
    match(CypherParser::WITH);
    setState(550);
    oC_ProjectionBody();
    setState(555);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      setState(552);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(551);
        match(CypherParser::SP);
      }
      setState(554);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}

void CypherParser::OC_ReturnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Return(this);
}

void CypherParser::OC_ReturnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Return(this);
}


std::any CypherParser::OC_ReturnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Return(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    match(CypherParser::RETURN);
    setState(558);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}

void CypherParser::OC_ProjectionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ProjectionBody(this);
}

void CypherParser::OC_ProjectionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ProjectionBody(this);
}


std::any CypherParser::OC_ProjectionBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProjectionBody(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(564);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(561);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(560);
        match(CypherParser::SP);
      }
      setState(563);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(566);
    match(CypherParser::SP);
    setState(567);
    oC_ProjectionItems();
    setState(570);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(568);
      match(CypherParser::SP);
      setState(569);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(574);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(572);
      match(CypherParser::SP);
      setState(573);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(578);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(576);
      match(CypherParser::SP);
      setState(577);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}

void CypherParser::OC_ProjectionItemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ProjectionItems(this);
}

void CypherParser::OC_ProjectionItemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ProjectionItems(this);
}


std::any CypherParser::OC_ProjectionItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProjectionItems(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(608);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__4: {
        enterOuterAlt(_localctx, 1);
        setState(580);
        match(CypherParser::T__4);
        setState(591);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(582);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(581);
              match(CypherParser::SP);
            }
            setState(584);
            match(CypherParser::T__1);
            setState(586);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(585);
              match(CypherParser::SP);
            }
            setState(588);
            oC_ProjectionItem(); 
          }
          setState(593);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx);
        }
        break;
      }

      case CypherParser::T__5:
      case CypherParser::T__7:
      case CypherParser::T__17:
      case CypherParser::T__18:
      case CypherParser::T__23:
      case CypherParser::T__25:
      case CypherParser::ALL:
      case CypherParser::NOT:
      case CypherParser::NULL_:
      case CypherParser::COUNT:
      case CypherParser::CASE:
      case CypherParser::ANY:
      case CypherParser::NONE:
      case CypherParser::SINGLE:
      case CypherParser::EXISTS:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::HexInteger:
      case CypherParser::DecimalInteger:
      case CypherParser::OctalInteger:
      case CypherParser::HexLetter:
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal:
      case CypherParser::StringLiteral:
      case CypherParser::FILTER:
      case CypherParser::EXTRACT:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(594);
        oC_ProjectionItem();
        setState(605);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(596);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(595);
              match(CypherParser::SP);
            }
            setState(598);
            match(CypherParser::T__1);
            setState(600);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(599);
              match(CypherParser::SP);
            }
            setState(602);
            oC_ProjectionItem(); 
          }
          setState(607);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}

void CypherParser::OC_ProjectionItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ProjectionItem(this);
}

void CypherParser::OC_ProjectionItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ProjectionItem(this);
}


std::any CypherParser::OC_ProjectionItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProjectionItem(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(617);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(610);
      oC_Expression();
      setState(611);
      match(CypherParser::SP);
      setState(612);
      match(CypherParser::AS);
      setState(613);
      match(CypherParser::SP);
      setState(614);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(616);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}

void CypherParser::OC_OrderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Order(this);
}

void CypherParser::OC_OrderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Order(this);
}


std::any CypherParser::OC_OrderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Order(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(619);
    match(CypherParser::ORDER);
    setState(620);
    match(CypherParser::SP);
    setState(621);
    match(CypherParser::BY);
    setState(622);
    match(CypherParser::SP);
    setState(623);
    oC_SortItem();
    setState(631);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__1) {
      setState(624);
      match(CypherParser::T__1);
      setState(626);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(625);
        match(CypherParser::SP);
      }
      setState(628);
      oC_SortItem();
      setState(633);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}

void CypherParser::OC_SkipContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Skip(this);
}

void CypherParser::OC_SkipContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Skip(this);
}


std::any CypherParser::OC_SkipContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Skip(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(634);
    match(CypherParser::L_SKIP);
    setState(635);
    match(CypherParser::SP);
    setState(636);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}

void CypherParser::OC_LimitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Limit(this);
}

void CypherParser::OC_LimitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Limit(this);
}


std::any CypherParser::OC_LimitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Limit(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(638);
    match(CypherParser::LIMIT);
    setState(639);
    match(CypherParser::SP);
    setState(640);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}

void CypherParser::OC_SortItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_SortItem(this);
}

void CypherParser::OC_SortItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_SortItem(this);
}


std::any CypherParser::OC_SortItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_SortItem(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(642);
    oC_Expression();
    setState(647);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(644);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(643);
        match(CypherParser::SP);
      }
      setState(646);
      _la = _input->LA(1);
      if (!(((((_la - 68) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 68)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}

void CypherParser::OC_WhereContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Where(this);
}

void CypherParser::OC_WhereContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Where(this);
}


std::any CypherParser::OC_WhereContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Where(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    match(CypherParser::WHERE);
    setState(650);
    match(CypherParser::SP);
    setState(651);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}

void CypherParser::OC_PatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Pattern(this);
}

void CypherParser::OC_PatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Pattern(this);
}


std::any CypherParser::OC_PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Pattern(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(653);
    oC_PatternPart();
    setState(664);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(655);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(654);
          match(CypherParser::SP);
        }
        setState(657);
        match(CypherParser::T__1);
        setState(659);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(658);
          match(CypherParser::SP);
        }
        setState(661);
        oC_PatternPart(); 
      }
      setState(666);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}

void CypherParser::OC_PatternPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PatternPart(this);
}

void CypherParser::OC_PatternPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PatternPart(this);
}


std::any CypherParser::OC_PatternPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternPart(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(678);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COUNT:
      case CypherParser::ANY:
      case CypherParser::NONE:
      case CypherParser::SINGLE:
      case CypherParser::HexLetter:
      case CypherParser::FILTER:
      case CypherParser::EXTRACT:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(667);
        oC_Variable();
        setState(669);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(668);
          match(CypherParser::SP);
        }
        setState(671);
        match(CypherParser::T__2);
        setState(673);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(672);
          match(CypherParser::SP);
        }
        setState(675);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__5: {
        enterOuterAlt(_localctx, 2);
        setState(677);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}

void CypherParser::OC_AnonymousPatternPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_AnonymousPatternPart(this);
}

void CypherParser::OC_AnonymousPatternPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_AnonymousPatternPart(this);
}


std::any CypherParser::OC_AnonymousPatternPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_AnonymousPatternPart(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(680);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}

void CypherParser::OC_PatternElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PatternElement(this);
}

void CypherParser::OC_PatternElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PatternElement(this);
}


std::any CypherParser::OC_PatternElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternElement(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(696);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(682);
      oC_NodePattern();
      setState(689);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(684);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(683);
            match(CypherParser::SP);
          }
          setState(686);
          oC_PatternElementChain(); 
        }
        setState(691);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(692);
      match(CypherParser::T__5);
      setState(693);
      oC_PatternElement();
      setState(694);
      match(CypherParser::T__6);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipsPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipsPatternContext::OC_RelationshipsPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_RelationshipsPatternContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_RelationshipsPatternContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_RelationshipsPatternContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipsPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipsPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipsPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipsPattern;
}

void CypherParser::OC_RelationshipsPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RelationshipsPattern(this);
}

void CypherParser::OC_RelationshipsPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RelationshipsPattern(this);
}


std::any CypherParser::OC_RelationshipsPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipsPattern(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RelationshipsPatternContext* CypherParser::oC_RelationshipsPattern() {
  OC_RelationshipsPatternContext *_localctx = _tracker.createInstance<OC_RelationshipsPatternContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleOC_RelationshipsPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(698);
    oC_NodePattern();
    setState(703); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(700);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(699);
                match(CypherParser::SP);
              }
              setState(702);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(705); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::OC_PropertiesContext* CypherParser::OC_NodePatternContext::oC_Properties() {
  return getRuleContext<CypherParser::OC_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}

void CypherParser::OC_NodePatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_NodePattern(this);
}

void CypherParser::OC_NodePatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_NodePattern(this);
}


std::any CypherParser::OC_NodePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodePattern(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(707);
    match(CypherParser::T__5);
    setState(709);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(708);
      match(CypherParser::SP);
    }
    setState(715);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 2680059625921) != 0)) {
      setState(711);
      oC_Variable();
      setState(713);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(712);
        match(CypherParser::SP);
      }
    }
    setState(721);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__9) {
      setState(717);
      oC_NodeLabels();
      setState(719);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(718);
        match(CypherParser::SP);
      }
    }
    setState(727);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__23

    || _la == CypherParser::T__25) {
      setState(723);
      oC_Properties();
      setState(725);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(724);
        match(CypherParser::SP);
      }
    }
    setState(729);
    match(CypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}

void CypherParser::OC_PatternElementChainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PatternElementChain(this);
}

void CypherParser::OC_PatternElementChainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PatternElementChain(this);
}


std::any CypherParser::OC_PatternElementChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternElementChain(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(731);
    oC_RelationshipPattern();
    setState(733);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(732);
      match(CypherParser::SP);
    }
    setState(735);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}

void CypherParser::OC_RelationshipPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RelationshipPattern(this);
}

void CypherParser::OC_RelationshipPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RelationshipPattern(this);
}


std::any CypherParser::OC_RelationshipPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipPattern(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(801);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(737);
      oC_LeftArrowHead();
      setState(739);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(738);
        match(CypherParser::SP);
      }
      setState(741);
      oC_Dash();
      setState(743);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
      case 1: {
        setState(742);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(746);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__7) {
        setState(745);
        oC_RelationshipDetail();
      }
      setState(749);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(748);
        match(CypherParser::SP);
      }
      setState(751);
      oC_Dash();
      setState(753);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(752);
        match(CypherParser::SP);
      }
      setState(755);
      oC_RightArrowHead();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(757);
      oC_LeftArrowHead();
      setState(759);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(758);
        match(CypherParser::SP);
      }
      setState(761);
      oC_Dash();
      setState(763);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
      case 1: {
        setState(762);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(766);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__7) {
        setState(765);
        oC_RelationshipDetail();
      }
      setState(769);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(768);
        match(CypherParser::SP);
      }
      setState(771);
      oC_Dash();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(773);
      oC_Dash();
      setState(775);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
      case 1: {
        setState(774);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(778);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__7) {
        setState(777);
        oC_RelationshipDetail();
      }
      setState(781);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(780);
        match(CypherParser::SP);
      }
      setState(783);
      oC_Dash();
      setState(785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(784);
        match(CypherParser::SP);
      }
      setState(787);
      oC_RightArrowHead();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(789);
      oC_Dash();
      setState(791);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
      case 1: {
        setState(790);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(794);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__7) {
        setState(793);
        oC_RelationshipDetail();
      }
      setState(797);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(796);
        match(CypherParser::SP);
      }
      setState(799);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::OC_PropertiesContext* CypherParser::OC_RelationshipDetailContext::oC_Properties() {
  return getRuleContext<CypherParser::OC_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}

void CypherParser::OC_RelationshipDetailContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RelationshipDetail(this);
}

void CypherParser::OC_RelationshipDetailContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RelationshipDetail(this);
}


std::any CypherParser::OC_RelationshipDetailContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipDetail(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(803);
    match(CypherParser::T__7);
    setState(805);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(804);
      match(CypherParser::SP);
    }
    setState(811);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 2680059625921) != 0)) {
      setState(807);
      oC_Variable();
      setState(809);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(808);
        match(CypherParser::SP);
      }
    }
    setState(817);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__9) {
      setState(813);
      oC_RelationshipTypes();
      setState(815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(814);
        match(CypherParser::SP);
      }
    }
    setState(820);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__4) {
      setState(819);
      oC_RangeLiteral();
    }
    setState(826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__23

    || _la == CypherParser::T__25) {
      setState(822);
      oC_Properties();
      setState(824);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(823);
        match(CypherParser::SP);
      }
    }
    setState(828);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertiesContext ------------------------------------------------------------------

CypherParser::OC_PropertiesContext::OC_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MapLiteralContext* CypherParser::OC_PropertiesContext::oC_MapLiteral() {
  return getRuleContext<CypherParser::OC_MapLiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_PropertiesContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}


size_t CypherParser::OC_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleOC_Properties;
}

void CypherParser::OC_PropertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Properties(this);
}

void CypherParser::OC_PropertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Properties(this);
}


std::any CypherParser::OC_PropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Properties(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PropertiesContext* CypherParser::oC_Properties() {
  OC_PropertiesContext *_localctx = _tracker.createInstance<OC_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleOC_Properties);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(832);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__23: {
        enterOuterAlt(_localctx, 1);
        setState(830);
        oC_MapLiteral();
        break;
      }

      case CypherParser::T__25: {
        enterOuterAlt(_localctx, 2);
        setState(831);
        oC_Parameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}

void CypherParser::OC_RelationshipTypesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RelationshipTypes(this);
}

void CypherParser::OC_RelationshipTypesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RelationshipTypes(this);
}


std::any CypherParser::OC_RelationshipTypesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipTypes(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(834);
    match(CypherParser::T__9);
    setState(836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(835);
      match(CypherParser::SP);
    }
    setState(838);
    oC_RelTypeName();
    setState(852);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(840);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(839);
          match(CypherParser::SP);
        }
        setState(842);
        match(CypherParser::T__10);
        setState(844);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::T__9) {
          setState(843);
          match(CypherParser::T__9);
        }
        setState(847);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(846);
          match(CypherParser::SP);
        }
        setState(849);
        oC_RelTypeName(); 
      }
      setState(854);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}

void CypherParser::OC_NodeLabelsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_NodeLabels(this);
}

void CypherParser::OC_NodeLabelsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_NodeLabels(this);
}


std::any CypherParser::OC_NodeLabelsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodeLabels(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(855);
    oC_NodeLabel();
    setState(862);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(857);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(856);
          match(CypherParser::SP);
        }
        setState(859);
        oC_NodeLabel(); 
      }
      setState(864);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}

void CypherParser::OC_NodeLabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_NodeLabel(this);
}

void CypherParser::OC_NodeLabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_NodeLabel(this);
}


std::any CypherParser::OC_NodeLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodeLabel(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(865);
    match(CypherParser::T__9);
    setState(867);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(866);
      match(CypherParser::SP);
    }
    setState(869);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}

void CypherParser::OC_RangeLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RangeLiteral(this);
}

void CypherParser::OC_RangeLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RangeLiteral(this);
}


std::any CypherParser::OC_RangeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RangeLiteral(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(871);
    match(CypherParser::T__4);
    setState(873);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(872);
      match(CypherParser::SP);
    }
    setState(879);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 95) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 95)) & 7) != 0)) {
      setState(875);
      oC_IntegerLiteral();
      setState(877);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(876);
        match(CypherParser::SP);
      }
    }
    setState(891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__11) {
      setState(881);
      match(CypherParser::T__11);
      setState(883);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(882);
        match(CypherParser::SP);
      }
      setState(889);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 95) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 95)) & 7) != 0)) {
        setState(885);
        oC_IntegerLiteral();
        setState(887);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(886);
          match(CypherParser::SP);
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}

void CypherParser::OC_LabelNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_LabelName(this);
}

void CypherParser::OC_LabelNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_LabelName(this);
}


std::any CypherParser::OC_LabelNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_LabelName(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(893);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}

void CypherParser::OC_RelTypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RelTypeName(this);
}

void CypherParser::OC_RelTypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RelTypeName(this);
}


std::any CypherParser::OC_RelTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelTypeName(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(895);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}

void CypherParser::OC_PropertyExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PropertyExpression(this);
}

void CypherParser::OC_PropertyExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PropertyExpression(this);
}


std::any CypherParser::OC_PropertyExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(897);
    oC_Atom();
    setState(902); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(899);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(898);
                match(CypherParser::SP);
              }
              setState(901);
              oC_PropertyLookup();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(904); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}

void CypherParser::OC_ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Expression(this);
}

void CypherParser::OC_ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Expression(this);
}


std::any CypherParser::OC_ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Expression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}

void CypherParser::OC_OrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_OrExpression(this);
}

void CypherParser::OC_OrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_OrExpression(this);
}


std::any CypherParser::OC_OrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_OrExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(908);
    oC_XorExpression();
    setState(915);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(909);
        match(CypherParser::SP);
        setState(910);
        match(CypherParser::OR);
        setState(911);
        match(CypherParser::SP);
        setState(912);
        oC_XorExpression(); 
      }
      setState(917);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}

void CypherParser::OC_XorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_XorExpression(this);
}

void CypherParser::OC_XorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_XorExpression(this);
}


std::any CypherParser::OC_XorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_XorExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(918);
    oC_AndExpression();
    setState(925);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(919);
        match(CypherParser::SP);
        setState(920);
        match(CypherParser::XOR);
        setState(921);
        match(CypherParser::SP);
        setState(922);
        oC_AndExpression(); 
      }
      setState(927);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}

void CypherParser::OC_AndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_AndExpression(this);
}

void CypherParser::OC_AndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_AndExpression(this);
}


std::any CypherParser::OC_AndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_AndExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(928);
    oC_NotExpression();
    setState(935);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(929);
        match(CypherParser::SP);
        setState(930);
        match(CypherParser::AND);
        setState(931);
        match(CypherParser::SP);
        setState(932);
        oC_NotExpression(); 
      }
      setState(937);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}

void CypherParser::OC_NotExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_NotExpression(this);
}

void CypherParser::OC_NotExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_NotExpression(this);
}


std::any CypherParser::OC_NotExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_NotExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(938);
      match(CypherParser::NOT);
      setState(940);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(939);
        match(CypherParser::SP);
      }
      setState(946);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(947);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullPredicateExpressionContext* CypherParser::OC_ComparisonExpressionContext::oC_StringListNullPredicateExpression() {
  return getRuleContext<CypherParser::OC_StringListNullPredicateExpressionContext>(0);
}

std::vector<CypherParser::OC_PartialComparisonExpressionContext *> CypherParser::OC_ComparisonExpressionContext::oC_PartialComparisonExpression() {
  return getRuleContexts<CypherParser::OC_PartialComparisonExpressionContext>();
}

CypherParser::OC_PartialComparisonExpressionContext* CypherParser::OC_ComparisonExpressionContext::oC_PartialComparisonExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PartialComparisonExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}

void CypherParser::OC_ComparisonExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ComparisonExpression(this);
}

void CypherParser::OC_ComparisonExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ComparisonExpression(this);
}


std::any CypherParser::OC_ComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(949);
    oC_StringListNullPredicateExpression();
    setState(956);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(951);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(950);
          match(CypherParser::SP);
        }
        setState(953);
        oC_PartialComparisonExpression(); 
      }
      setState(958);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PartialComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_PartialComparisonExpressionContext::OC_PartialComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullPredicateExpressionContext* CypherParser::OC_PartialComparisonExpressionContext::oC_StringListNullPredicateExpression() {
  return getRuleContext<CypherParser::OC_StringListNullPredicateExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_PartialComparisonExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PartialComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PartialComparisonExpression;
}

void CypherParser::OC_PartialComparisonExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PartialComparisonExpression(this);
}

void CypherParser::OC_PartialComparisonExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PartialComparisonExpression(this);
}


std::any CypherParser::OC_PartialComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PartialComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PartialComparisonExpressionContext* CypherParser::oC_PartialComparisonExpression() {
  OC_PartialComparisonExpressionContext *_localctx = _tracker.createInstance<OC_PartialComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_PartialComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(989);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__2: {
        enterOuterAlt(_localctx, 1);
        setState(959);
        match(CypherParser::T__2);
        setState(961);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(960);
          match(CypherParser::SP);
        }
        setState(963);
        oC_StringListNullPredicateExpression();
        break;
      }

      case CypherParser::T__12: {
        enterOuterAlt(_localctx, 2);
        setState(964);
        match(CypherParser::T__12);
        setState(966);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(965);
          match(CypherParser::SP);
        }
        setState(968);
        oC_StringListNullPredicateExpression();
        break;
      }

      case CypherParser::T__13: {
        enterOuterAlt(_localctx, 3);
        setState(969);
        match(CypherParser::T__13);
        setState(971);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(970);
          match(CypherParser::SP);
        }
        setState(973);
        oC_StringListNullPredicateExpression();
        break;
      }

      case CypherParser::T__14: {
        enterOuterAlt(_localctx, 4);
        setState(974);
        match(CypherParser::T__14);
        setState(976);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(975);
          match(CypherParser::SP);
        }
        setState(978);
        oC_StringListNullPredicateExpression();
        break;
      }

      case CypherParser::T__15: {
        enterOuterAlt(_localctx, 5);
        setState(979);
        match(CypherParser::T__15);
        setState(981);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(980);
          match(CypherParser::SP);
        }
        setState(983);
        oC_StringListNullPredicateExpression();
        break;
      }

      case CypherParser::T__16: {
        enterOuterAlt(_localctx, 6);
        setState(984);
        match(CypherParser::T__16);
        setState(986);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(985);
          match(CypherParser::SP);
        }
        setState(988);
        oC_StringListNullPredicateExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullPredicateExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullPredicateExpressionContext::OC_StringListNullPredicateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::OC_StringListNullPredicateExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(0);
}

std::vector<CypherParser::OC_StringPredicateExpressionContext *> CypherParser::OC_StringListNullPredicateExpressionContext::oC_StringPredicateExpression() {
  return getRuleContexts<CypherParser::OC_StringPredicateExpressionContext>();
}

CypherParser::OC_StringPredicateExpressionContext* CypherParser::OC_StringListNullPredicateExpressionContext::oC_StringPredicateExpression(size_t i) {
  return getRuleContext<CypherParser::OC_StringPredicateExpressionContext>(i);
}

std::vector<CypherParser::OC_ListPredicateExpressionContext *> CypherParser::OC_StringListNullPredicateExpressionContext::oC_ListPredicateExpression() {
  return getRuleContexts<CypherParser::OC_ListPredicateExpressionContext>();
}

CypherParser::OC_ListPredicateExpressionContext* CypherParser::OC_StringListNullPredicateExpressionContext::oC_ListPredicateExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListPredicateExpressionContext>(i);
}

std::vector<CypherParser::OC_NullPredicateExpressionContext *> CypherParser::OC_StringListNullPredicateExpressionContext::oC_NullPredicateExpression() {
  return getRuleContexts<CypherParser::OC_NullPredicateExpressionContext>();
}

CypherParser::OC_NullPredicateExpressionContext* CypherParser::OC_StringListNullPredicateExpressionContext::oC_NullPredicateExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NullPredicateExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullPredicateExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullPredicateExpression;
}

void CypherParser::OC_StringListNullPredicateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_StringListNullPredicateExpression(this);
}

void CypherParser::OC_StringListNullPredicateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_StringListNullPredicateExpression(this);
}


std::any CypherParser::OC_StringListNullPredicateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_StringListNullPredicateExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_StringListNullPredicateExpressionContext* CypherParser::oC_StringListNullPredicateExpression() {
  OC_StringListNullPredicateExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullPredicateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_StringListNullPredicateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(991);
    oC_AddOrSubtractExpression();
    setState(997);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(995);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
        case 1: {
          setState(992);
          oC_StringPredicateExpression();
          break;
        }

        case 2: {
          setState(993);
          oC_ListPredicateExpression();
          break;
        }

        case 3: {
          setState(994);
          oC_NullPredicateExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(999);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringPredicateExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringPredicateExpressionContext::OC_StringPredicateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::OC_StringPredicateExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringPredicateExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringPredicateExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringPredicateExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringPredicateExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringPredicateExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringPredicateExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringPredicateExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringPredicateExpression;
}

void CypherParser::OC_StringPredicateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_StringPredicateExpression(this);
}

void CypherParser::OC_StringPredicateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_StringPredicateExpression(this);
}


std::any CypherParser::OC_StringPredicateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_StringPredicateExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_StringPredicateExpressionContext* CypherParser::oC_StringPredicateExpression() {
  OC_StringPredicateExpressionContext *_localctx = _tracker.createInstance<OC_StringPredicateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_StringPredicateExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1010);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      setState(1000);
      match(CypherParser::SP);
      setState(1001);
      match(CypherParser::STARTS);
      setState(1002);
      match(CypherParser::SP);
      setState(1003);
      match(CypherParser::WITH);
      break;
    }

    case 2: {
      setState(1004);
      match(CypherParser::SP);
      setState(1005);
      match(CypherParser::ENDS);
      setState(1006);
      match(CypherParser::SP);
      setState(1007);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(1008);
      match(CypherParser::SP);
      setState(1009);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(1013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1012);
      match(CypherParser::SP);
    }
    setState(1015);
    oC_AddOrSubtractExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListPredicateExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListPredicateExpressionContext::OC_ListPredicateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListPredicateExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListPredicateExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListPredicateExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::OC_ListPredicateExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(0);
}


size_t CypherParser::OC_ListPredicateExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListPredicateExpression;
}

void CypherParser::OC_ListPredicateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ListPredicateExpression(this);
}

void CypherParser::OC_ListPredicateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ListPredicateExpression(this);
}


std::any CypherParser::OC_ListPredicateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListPredicateExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ListPredicateExpressionContext* CypherParser::oC_ListPredicateExpression() {
  OC_ListPredicateExpressionContext *_localctx = _tracker.createInstance<OC_ListPredicateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_ListPredicateExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1017);
    match(CypherParser::SP);
    setState(1018);
    match(CypherParser::IN);
    setState(1020);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1019);
      match(CypherParser::SP);
    }
    setState(1022);
    oC_AddOrSubtractExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullPredicateExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullPredicateExpressionContext::OC_NullPredicateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullPredicateExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullPredicateExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullPredicateExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullPredicateExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullPredicateExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullPredicateExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullPredicateExpression;
}

void CypherParser::OC_NullPredicateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_NullPredicateExpression(this);
}

void CypherParser::OC_NullPredicateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_NullPredicateExpression(this);
}


std::any CypherParser::OC_NullPredicateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_NullPredicateExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_NullPredicateExpressionContext* CypherParser::oC_NullPredicateExpression() {
  OC_NullPredicateExpressionContext *_localctx = _tracker.createInstance<OC_NullPredicateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_NullPredicateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1034);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1024);
      match(CypherParser::SP);
      setState(1025);
      match(CypherParser::IS);
      setState(1026);
      match(CypherParser::SP);
      setState(1027);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1028);
      match(CypherParser::SP);
      setState(1029);
      match(CypherParser::IS);
      setState(1030);
      match(CypherParser::SP);
      setState(1031);
      match(CypherParser::NOT);
      setState(1032);
      match(CypherParser::SP);
      setState(1033);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}

void CypherParser::OC_AddOrSubtractExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_AddOrSubtractExpression(this);
}

void CypherParser::OC_AddOrSubtractExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_AddOrSubtractExpression(this);
}


std::any CypherParser::OC_AddOrSubtractExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_AddOrSubtractExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1036);
    oC_MultiplyDivideModuloExpression();
    setState(1055);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1053);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
        case 1: {
          setState(1038);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1037);
            match(CypherParser::SP);
          }
          setState(1040);
          match(CypherParser::T__17);
          setState(1042);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1041);
            match(CypherParser::SP);
          }
          setState(1044);
          oC_MultiplyDivideModuloExpression();
          break;
        }

        case 2: {
          setState(1046);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1045);
            match(CypherParser::SP);
          }
          setState(1048);
          match(CypherParser::T__18);
          setState(1050);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1049);
            match(CypherParser::SP);
          }
          setState(1052);
          oC_MultiplyDivideModuloExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1057);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}

void CypherParser::OC_MultiplyDivideModuloExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_MultiplyDivideModuloExpression(this);
}

void CypherParser::OC_MultiplyDivideModuloExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_MultiplyDivideModuloExpression(this);
}


std::any CypherParser::OC_MultiplyDivideModuloExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_MultiplyDivideModuloExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1058);
    oC_PowerOfExpression();
    setState(1085);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1083);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
        case 1: {
          setState(1060);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1059);
            match(CypherParser::SP);
          }
          setState(1062);
          match(CypherParser::T__4);
          setState(1064);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1063);
            match(CypherParser::SP);
          }
          setState(1066);
          oC_PowerOfExpression();
          break;
        }

        case 2: {
          setState(1068);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1067);
            match(CypherParser::SP);
          }
          setState(1070);
          match(CypherParser::T__19);
          setState(1072);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1071);
            match(CypherParser::SP);
          }
          setState(1074);
          oC_PowerOfExpression();
          break;
        }

        case 3: {
          setState(1076);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1075);
            match(CypherParser::SP);
          }
          setState(1078);
          match(CypherParser::T__20);
          setState(1080);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1079);
            match(CypherParser::SP);
          }
          setState(1082);
          oC_PowerOfExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1087);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddOrSubtractExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddOrSubtractExpressionContext>();
}

CypherParser::OC_UnaryAddOrSubtractExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddOrSubtractExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}

void CypherParser::OC_PowerOfExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PowerOfExpression(this);
}

void CypherParser::OC_PowerOfExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PowerOfExpression(this);
}


std::any CypherParser::OC_PowerOfExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PowerOfExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1088);
    oC_UnaryAddOrSubtractExpression();
    setState(1099);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1090);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1089);
          match(CypherParser::SP);
        }
        setState(1092);
        match(CypherParser::T__21);
        setState(1094);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1093);
          match(CypherParser::SP);
        }
        setState(1096);
        oC_UnaryAddOrSubtractExpression(); 
      }
      setState(1101);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddOrSubtractExpressionContext::OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NonArithmeticOperatorExpressionContext* CypherParser::OC_UnaryAddOrSubtractExpressionContext::oC_NonArithmeticOperatorExpression() {
  return getRuleContext<CypherParser::OC_NonArithmeticOperatorExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_UnaryAddOrSubtractExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_UnaryAddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddOrSubtractExpression;
}

void CypherParser::OC_UnaryAddOrSubtractExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_UnaryAddOrSubtractExpression(this);
}

void CypherParser::OC_UnaryAddOrSubtractExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_UnaryAddOrSubtractExpression(this);
}


std::any CypherParser::OC_UnaryAddOrSubtractExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_UnaryAddOrSubtractExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_UnaryAddOrSubtractExpressionContext* CypherParser::oC_UnaryAddOrSubtractExpression() {
  OC_UnaryAddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_UnaryAddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1108);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__5:
      case CypherParser::T__7:
      case CypherParser::T__23:
      case CypherParser::T__25:
      case CypherParser::ALL:
      case CypherParser::NULL_:
      case CypherParser::COUNT:
      case CypherParser::CASE:
      case CypherParser::ANY:
      case CypherParser::NONE:
      case CypherParser::SINGLE:
      case CypherParser::EXISTS:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::HexInteger:
      case CypherParser::DecimalInteger:
      case CypherParser::OctalInteger:
      case CypherParser::HexLetter:
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal:
      case CypherParser::StringLiteral:
      case CypherParser::FILTER:
      case CypherParser::EXTRACT:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1102);
        oC_NonArithmeticOperatorExpression();
        break;
      }

      case CypherParser::T__17:
      case CypherParser::T__18: {
        enterOuterAlt(_localctx, 2);
        setState(1103);
        _la = _input->LA(1);
        if (!(_la == CypherParser::T__17

        || _la == CypherParser::T__18)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1105);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1104);
          match(CypherParser::SP);
        }
        setState(1107);
        oC_NonArithmeticOperatorExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NonArithmeticOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NonArithmeticOperatorExpressionContext::OC_NonArithmeticOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_NonArithmeticOperatorExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NonArithmeticOperatorExpressionContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_NonArithmeticOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_NonArithmeticOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_NonArithmeticOperatorExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_NonArithmeticOperatorExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NonArithmeticOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NonArithmeticOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NonArithmeticOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NonArithmeticOperatorExpression;
}

void CypherParser::OC_NonArithmeticOperatorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_NonArithmeticOperatorExpression(this);
}

void CypherParser::OC_NonArithmeticOperatorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_NonArithmeticOperatorExpression(this);
}


std::any CypherParser::OC_NonArithmeticOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_NonArithmeticOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_NonArithmeticOperatorExpressionContext* CypherParser::oC_NonArithmeticOperatorExpression() {
  OC_NonArithmeticOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NonArithmeticOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_NonArithmeticOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1110);
    oC_Atom();
    setState(1121);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1119);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
        case 1: {
          setState(1112);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1111);
            match(CypherParser::SP);
          }
          setState(1114);
          oC_ListOperatorExpression();
          break;
        }

        case 2: {
          setState(1116);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1115);
            match(CypherParser::SP);
          }
          setState(1118);
          oC_PropertyLookup();
          break;
        }

        default:
          break;
        } 
      }
      setState(1123);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    }
    setState(1128);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(1125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1124);
        match(CypherParser::SP);
      }
      setState(1127);
      oC_NodeLabels();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}

void CypherParser::OC_ListOperatorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ListOperatorExpression(this);
}

void CypherParser::OC_ListOperatorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ListOperatorExpression(this);
}


std::any CypherParser::OC_ListOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1143);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1130);
      match(CypherParser::T__7);
      setState(1131);
      oC_Expression();
      setState(1132);
      match(CypherParser::T__8);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1134);
      match(CypherParser::T__7);
      setState(1136);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 140737573028160) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 76)) & 343051394343361) != 0)) {
        setState(1135);
        oC_Expression();
      }
      setState(1138);
      match(CypherParser::T__11);
      setState(1140);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 140737573028160) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 76)) & 343051394343361) != 0)) {
        setState(1139);
        oC_Expression();
      }
      setState(1142);
      match(CypherParser::T__8);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}

void CypherParser::OC_PropertyLookupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PropertyLookup(this);
}

void CypherParser::OC_PropertyLookupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PropertyLookup(this);
}


std::any CypherParser::OC_PropertyLookupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyLookup(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1145);
    match(CypherParser::T__22);
    setState(1147);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1146);
      match(CypherParser::SP);
    }

    setState(1149);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_AtomContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AtomContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AtomContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ListComprehensionContext* CypherParser::OC_AtomContext::oC_ListComprehension() {
  return getRuleContext<CypherParser::OC_ListComprehensionContext>(0);
}

CypherParser::OC_PatternComprehensionContext* CypherParser::OC_AtomContext::oC_PatternComprehension() {
  return getRuleContext<CypherParser::OC_PatternComprehensionContext>(0);
}

CypherParser::OC_QuantifierContext* CypherParser::OC_AtomContext::oC_Quantifier() {
  return getRuleContext<CypherParser::OC_QuantifierContext>(0);
}

CypherParser::OC_PatternPredicateContext* CypherParser::OC_AtomContext::oC_PatternPredicate() {
  return getRuleContext<CypherParser::OC_PatternPredicateContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_ExistentialSubqueryContext* CypherParser::OC_AtomContext::oC_ExistentialSubquery() {
  return getRuleContext<CypherParser::OC_ExistentialSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}

void CypherParser::OC_AtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Atom(this);
}

void CypherParser::OC_AtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Atom(this);
}


std::any CypherParser::OC_AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Atom(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_Atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1175);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1151);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1152);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1153);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1154);
      match(CypherParser::COUNT);
      setState(1156);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1155);
        match(CypherParser::SP);
      }
      setState(1158);
      match(CypherParser::T__5);
      setState(1160);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1159);
        match(CypherParser::SP);
      }
      setState(1162);
      match(CypherParser::T__4);
      setState(1164);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1163);
        match(CypherParser::SP);
      }
      setState(1166);
      match(CypherParser::T__6);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1167);
      oC_ListComprehension();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1168);
      oC_PatternComprehension();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1169);
      oC_Quantifier();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1170);
      oC_PatternPredicate();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1171);
      oC_ParenthesizedExpression();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1172);
      oC_FunctionInvocation();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1173);
      oC_ExistentialSubquery();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1174);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}

void CypherParser::OC_CaseExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_CaseExpression(this);
}

void CypherParser::OC_CaseExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_CaseExpression(this);
}


std::any CypherParser::OC_CaseExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_CaseExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1199);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      setState(1177);
      match(CypherParser::CASE);
      setState(1182); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1179);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1178);
                  match(CypherParser::SP);
                }
                setState(1181);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1184); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(1186);
      match(CypherParser::CASE);
      setState(1188);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1187);
        match(CypherParser::SP);
      }
      setState(1190);
      oC_Expression();
      setState(1195); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1192);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1191);
                  match(CypherParser::SP);
                }
                setState(1194);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1197); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(1209);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      setState(1202);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1201);
        match(CypherParser::SP);
      }
      setState(1204);
      match(CypherParser::ELSE);
      setState(1206);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1205);
        match(CypherParser::SP);
      }
      setState(1208);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(1212);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1211);
      match(CypherParser::SP);
    }
    setState(1214);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}

void CypherParser::OC_CaseAlternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_CaseAlternative(this);
}

void CypherParser::OC_CaseAlternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_CaseAlternative(this);
}


std::any CypherParser::OC_CaseAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_CaseAlternative(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1216);
    match(CypherParser::WHEN);
    setState(1218);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1217);
      match(CypherParser::SP);
    }
    setState(1220);
    oC_Expression();
    setState(1222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1221);
      match(CypherParser::SP);
    }
    setState(1224);
    match(CypherParser::THEN);
    setState(1226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1225);
      match(CypherParser::SP);
    }
    setState(1228);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListComprehensionContext ------------------------------------------------------------------

CypherParser::OC_ListComprehensionContext::OC_ListComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_FilterExpressionContext* CypherParser::OC_ListComprehensionContext::oC_FilterExpression() {
  return getRuleContext<CypherParser::OC_FilterExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListComprehensionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_ListComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListComprehension;
}

void CypherParser::OC_ListComprehensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ListComprehension(this);
}

void CypherParser::OC_ListComprehensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ListComprehension(this);
}


std::any CypherParser::OC_ListComprehensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListComprehension(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ListComprehensionContext* CypherParser::oC_ListComprehension() {
  OC_ListComprehensionContext *_localctx = _tracker.createInstance<OC_ListComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_ListComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1230);
    match(CypherParser::T__7);
    setState(1232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1231);
      match(CypherParser::SP);
    }
    setState(1234);
    oC_FilterExpression();
    setState(1243);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      setState(1236);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1235);
        match(CypherParser::SP);
      }
      setState(1238);
      match(CypherParser::T__10);
      setState(1240);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1239);
        match(CypherParser::SP);
      }
      setState(1242);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(1246);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1245);
      match(CypherParser::SP);
    }
    setState(1248);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternComprehensionContext ------------------------------------------------------------------

CypherParser::OC_PatternComprehensionContext::OC_PatternComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipsPatternContext* CypherParser::OC_PatternComprehensionContext::oC_RelationshipsPattern() {
  return getRuleContext<CypherParser::OC_RelationshipsPatternContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_PatternComprehensionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternComprehensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_PatternComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_PatternComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternComprehension;
}

void CypherParser::OC_PatternComprehensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PatternComprehension(this);
}

void CypherParser::OC_PatternComprehensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PatternComprehension(this);
}


std::any CypherParser::OC_PatternComprehensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternComprehension(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PatternComprehensionContext* CypherParser::oC_PatternComprehension() {
  OC_PatternComprehensionContext *_localctx = _tracker.createInstance<OC_PatternComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_PatternComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1250);
    match(CypherParser::T__7);
    setState(1252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1251);
      match(CypherParser::SP);
    }
    setState(1262);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 2680059625921) != 0)) {
      setState(1254);
      oC_Variable();
      setState(1256);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1255);
        match(CypherParser::SP);
      }
      setState(1258);
      match(CypherParser::T__2);
      setState(1260);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1259);
        match(CypherParser::SP);
      }
    }
    setState(1264);
    oC_RelationshipsPattern();
    setState(1266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1265);
      match(CypherParser::SP);
    }
    setState(1272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WHERE) {
      setState(1268);
      oC_Where();
      setState(1270);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1269);
        match(CypherParser::SP);
      }
    }
    setState(1274);
    match(CypherParser::T__10);
    setState(1276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1275);
      match(CypherParser::SP);
    }
    setState(1278);
    oC_Expression();
    setState(1280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1279);
      match(CypherParser::SP);
    }
    setState(1282);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QuantifierContext ------------------------------------------------------------------

CypherParser::OC_QuantifierContext::OC_QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_FilterExpressionContext* CypherParser::OC_QuantifierContext::oC_FilterExpression() {
  return getRuleContext<CypherParser::OC_FilterExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_QuantifierContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::ANY() {
  return getToken(CypherParser::ANY, 0);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::NONE() {
  return getToken(CypherParser::NONE, 0);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::SINGLE() {
  return getToken(CypherParser::SINGLE, 0);
}


size_t CypherParser::OC_QuantifierContext::getRuleIndex() const {
  return CypherParser::RuleOC_Quantifier;
}

void CypherParser::OC_QuantifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Quantifier(this);
}

void CypherParser::OC_QuantifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Quantifier(this);
}


std::any CypherParser::OC_QuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Quantifier(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_QuantifierContext* CypherParser::oC_Quantifier() {
  OC_QuantifierContext *_localctx = _tracker.createInstance<OC_QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_Quantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1340);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(1284);
        match(CypherParser::ALL);
        setState(1286);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1285);
          match(CypherParser::SP);
        }
        setState(1288);
        match(CypherParser::T__5);
        setState(1290);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1289);
          match(CypherParser::SP);
        }
        setState(1292);
        oC_FilterExpression();
        setState(1294);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1293);
          match(CypherParser::SP);
        }
        setState(1296);
        match(CypherParser::T__6);
        break;
      }

      case CypherParser::ANY: {
        enterOuterAlt(_localctx, 2);
        setState(1298);
        match(CypherParser::ANY);
        setState(1300);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1299);
          match(CypherParser::SP);
        }
        setState(1302);
        match(CypherParser::T__5);
        setState(1304);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1303);
          match(CypherParser::SP);
        }
        setState(1306);
        oC_FilterExpression();
        setState(1308);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1307);
          match(CypherParser::SP);
        }
        setState(1310);
        match(CypherParser::T__6);
        break;
      }

      case CypherParser::NONE: {
        enterOuterAlt(_localctx, 3);
        setState(1312);
        match(CypherParser::NONE);
        setState(1314);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1313);
          match(CypherParser::SP);
        }
        setState(1316);
        match(CypherParser::T__5);
        setState(1318);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1317);
          match(CypherParser::SP);
        }
        setState(1320);
        oC_FilterExpression();
        setState(1322);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1321);
          match(CypherParser::SP);
        }
        setState(1324);
        match(CypherParser::T__6);
        break;
      }

      case CypherParser::SINGLE: {
        enterOuterAlt(_localctx, 4);
        setState(1326);
        match(CypherParser::SINGLE);
        setState(1328);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1327);
          match(CypherParser::SP);
        }
        setState(1330);
        match(CypherParser::T__5);
        setState(1332);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1331);
          match(CypherParser::SP);
        }
        setState(1334);
        oC_FilterExpression();
        setState(1336);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1335);
          match(CypherParser::SP);
        }
        setState(1338);
        match(CypherParser::T__6);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FilterExpressionContext ------------------------------------------------------------------

CypherParser::OC_FilterExpressionContext::OC_FilterExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IdInCollContext* CypherParser::OC_FilterExpressionContext::oC_IdInColl() {
  return getRuleContext<CypherParser::OC_IdInCollContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_FilterExpressionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_FilterExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_FilterExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_FilterExpression;
}

void CypherParser::OC_FilterExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_FilterExpression(this);
}

void CypherParser::OC_FilterExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_FilterExpression(this);
}


std::any CypherParser::OC_FilterExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_FilterExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_FilterExpressionContext* CypherParser::oC_FilterExpression() {
  OC_FilterExpressionContext *_localctx = _tracker.createInstance<OC_FilterExpressionContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_FilterExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1342);
    oC_IdInColl();
    setState(1347);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
    case 1: {
      setState(1344);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1343);
        match(CypherParser::SP);
      }
      setState(1346);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPredicateContext ------------------------------------------------------------------

CypherParser::OC_PatternPredicateContext::OC_PatternPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipsPatternContext* CypherParser::OC_PatternPredicateContext::oC_RelationshipsPattern() {
  return getRuleContext<CypherParser::OC_RelationshipsPatternContext>(0);
}


size_t CypherParser::OC_PatternPredicateContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPredicate;
}

void CypherParser::OC_PatternPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PatternPredicate(this);
}

void CypherParser::OC_PatternPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PatternPredicate(this);
}


std::any CypherParser::OC_PatternPredicateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternPredicate(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PatternPredicateContext* CypherParser::oC_PatternPredicate() {
  OC_PatternPredicateContext *_localctx = _tracker.createInstance<OC_PatternPredicateContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_PatternPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1349);
    oC_RelationshipsPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}

void CypherParser::OC_ParenthesizedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ParenthesizedExpression(this);
}

void CypherParser::OC_ParenthesizedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ParenthesizedExpression(this);
}


std::any CypherParser::OC_ParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1351);
    match(CypherParser::T__5);
    setState(1353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1352);
      match(CypherParser::SP);
    }
    setState(1355);
    oC_Expression();
    setState(1357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1356);
      match(CypherParser::SP);
    }
    setState(1359);
    match(CypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IdInCollContext ------------------------------------------------------------------

CypherParser::OC_IdInCollContext::OC_IdInCollContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_IdInCollContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_IdInCollContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_IdInCollContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_IdInCollContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_IdInCollContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_IdInCollContext::getRuleIndex() const {
  return CypherParser::RuleOC_IdInColl;
}

void CypherParser::OC_IdInCollContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_IdInColl(this);
}

void CypherParser::OC_IdInCollContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_IdInColl(this);
}


std::any CypherParser::OC_IdInCollContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_IdInColl(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_IdInCollContext* CypherParser::oC_IdInColl() {
  OC_IdInCollContext *_localctx = _tracker.createInstance<OC_IdInCollContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_IdInColl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1361);
    oC_Variable();
    setState(1362);
    match(CypherParser::SP);
    setState(1363);
    match(CypherParser::IN);
    setState(1364);
    match(CypherParser::SP);
    setState(1365);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_FunctionInvocationContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_FunctionInvocationContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}

void CypherParser::OC_FunctionInvocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_FunctionInvocation(this);
}

void CypherParser::OC_FunctionInvocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_FunctionInvocation(this);
}


std::any CypherParser::OC_FunctionInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_FunctionInvocation(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1367);
    oC_FunctionName();
    setState(1369);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1368);
      match(CypherParser::SP);
    }
    setState(1371);
    match(CypherParser::T__5);
    setState(1373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1372);
      match(CypherParser::SP);
    }
    setState(1379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DISTINCT) {
      setState(1375);
      match(CypherParser::DISTINCT);
      setState(1377);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1376);
        match(CypherParser::SP);
      }
    }
    setState(1398);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 140737573028160) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 343051394343361) != 0)) {
      setState(1381);
      oC_Expression();
      setState(1383);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1382);
        match(CypherParser::SP);
      }
      setState(1395);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__1) {
        setState(1385);
        match(CypherParser::T__1);
        setState(1387);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1386);
          match(CypherParser::SP);
        }
        setState(1389);
        oC_Expression();
        setState(1391);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1390);
          match(CypherParser::SP);
        }
        setState(1397);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1400);
    match(CypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NamespaceContext* CypherParser::OC_FunctionNameContext::oC_Namespace() {
  return getRuleContext<CypherParser::OC_NamespaceContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}

void CypherParser::OC_FunctionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_FunctionName(this);
}

void CypherParser::OC_FunctionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_FunctionName(this);
}


std::any CypherParser::OC_FunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_FunctionName(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1402);
    oC_Namespace();
    setState(1403);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistentialSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistentialSubqueryContext::OC_ExistentialSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistentialSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_ExistentialSubqueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistentialSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistentialSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistentialSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistentialSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistentialSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistentialSubquery;
}

void CypherParser::OC_ExistentialSubqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ExistentialSubquery(this);
}

void CypherParser::OC_ExistentialSubqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ExistentialSubquery(this);
}


std::any CypherParser::OC_ExistentialSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ExistentialSubquery(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ExistentialSubqueryContext* CypherParser::oC_ExistentialSubquery() {
  OC_ExistentialSubqueryContext *_localctx = _tracker.createInstance<OC_ExistentialSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_ExistentialSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1405);
    match(CypherParser::EXISTS);
    setState(1407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1406);
      match(CypherParser::SP);
    }
    setState(1409);
    match(CypherParser::T__23);
    setState(1411);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1410);
      match(CypherParser::SP);
    }
    setState(1421);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH:
      case CypherParser::UNWIND:
      case CypherParser::MERGE:
      case CypherParser::CREATE:
      case CypherParser::SET:
      case CypherParser::DETACH:
      case CypherParser::DELETE:
      case CypherParser::REMOVE:
      case CypherParser::CALL:
      case CypherParser::WITH:
      case CypherParser::RETURN: {
        setState(1413);
        oC_RegularQuery();
        break;
      }

      case CypherParser::T__5:
      case CypherParser::COUNT:
      case CypherParser::ANY:
      case CypherParser::NONE:
      case CypherParser::SINGLE:
      case CypherParser::HexLetter:
      case CypherParser::FILTER:
      case CypherParser::EXTRACT:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1414);
        oC_Pattern();
        setState(1419);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx)) {
        case 1: {
          setState(1416);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1415);
            match(CypherParser::SP);
          }
          setState(1418);
          oC_Where();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1424);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1423);
      match(CypherParser::SP);
    }
    setState(1426);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplicitProcedureInvocationContext ------------------------------------------------------------------

CypherParser::OC_ExplicitProcedureInvocationContext::OC_ExplicitProcedureInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ProcedureNameContext* CypherParser::OC_ExplicitProcedureInvocationContext::oC_ProcedureName() {
  return getRuleContext<CypherParser::OC_ProcedureNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExplicitProcedureInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExplicitProcedureInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ExplicitProcedureInvocationContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ExplicitProcedureInvocationContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::OC_ExplicitProcedureInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExplicitProcedureInvocation;
}

void CypherParser::OC_ExplicitProcedureInvocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ExplicitProcedureInvocation(this);
}

void CypherParser::OC_ExplicitProcedureInvocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ExplicitProcedureInvocation(this);
}


std::any CypherParser::OC_ExplicitProcedureInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ExplicitProcedureInvocation(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ExplicitProcedureInvocationContext* CypherParser::oC_ExplicitProcedureInvocation() {
  OC_ExplicitProcedureInvocationContext *_localctx = _tracker.createInstance<OC_ExplicitProcedureInvocationContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_ExplicitProcedureInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1428);
    oC_ProcedureName();
    setState(1430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1429);
      match(CypherParser::SP);
    }
    setState(1432);
    match(CypherParser::T__5);
    setState(1434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1433);
      match(CypherParser::SP);
    }
    setState(1453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 140737573028160) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 343051394343361) != 0)) {
      setState(1436);
      oC_Expression();
      setState(1438);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1437);
        match(CypherParser::SP);
      }
      setState(1450);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__1) {
        setState(1440);
        match(CypherParser::T__1);
        setState(1442);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1441);
          match(CypherParser::SP);
        }
        setState(1444);
        oC_Expression();
        setState(1446);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1445);
          match(CypherParser::SP);
        }
        setState(1452);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1455);
    match(CypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ImplicitProcedureInvocationContext ------------------------------------------------------------------

CypherParser::OC_ImplicitProcedureInvocationContext::OC_ImplicitProcedureInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ProcedureNameContext* CypherParser::OC_ImplicitProcedureInvocationContext::oC_ProcedureName() {
  return getRuleContext<CypherParser::OC_ProcedureNameContext>(0);
}


size_t CypherParser::OC_ImplicitProcedureInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_ImplicitProcedureInvocation;
}

void CypherParser::OC_ImplicitProcedureInvocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ImplicitProcedureInvocation(this);
}

void CypherParser::OC_ImplicitProcedureInvocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ImplicitProcedureInvocation(this);
}


std::any CypherParser::OC_ImplicitProcedureInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ImplicitProcedureInvocation(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ImplicitProcedureInvocationContext* CypherParser::oC_ImplicitProcedureInvocation() {
  OC_ImplicitProcedureInvocationContext *_localctx = _tracker.createInstance<OC_ImplicitProcedureInvocationContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_ImplicitProcedureInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1457);
    oC_ProcedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProcedureResultFieldContext ------------------------------------------------------------------

CypherParser::OC_ProcedureResultFieldContext::OC_ProcedureResultFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ProcedureResultFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_ProcedureResultFieldContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProcedureResultField;
}

void CypherParser::OC_ProcedureResultFieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ProcedureResultField(this);
}

void CypherParser::OC_ProcedureResultFieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ProcedureResultField(this);
}


std::any CypherParser::OC_ProcedureResultFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProcedureResultField(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ProcedureResultFieldContext* CypherParser::oC_ProcedureResultField() {
  OC_ProcedureResultFieldContext *_localctx = _tracker.createInstance<OC_ProcedureResultFieldContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_ProcedureResultField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1459);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProcedureNameContext ------------------------------------------------------------------

CypherParser::OC_ProcedureNameContext::OC_ProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NamespaceContext* CypherParser::OC_ProcedureNameContext::oC_Namespace() {
  return getRuleContext<CypherParser::OC_NamespaceContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ProcedureNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_ProcedureNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProcedureName;
}

void CypherParser::OC_ProcedureNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ProcedureName(this);
}

void CypherParser::OC_ProcedureNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ProcedureName(this);
}


std::any CypherParser::OC_ProcedureNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProcedureName(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ProcedureNameContext* CypherParser::oC_ProcedureName() {
  OC_ProcedureNameContext *_localctx = _tracker.createInstance<OC_ProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_ProcedureName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1461);
    oC_Namespace();
    setState(1462);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NamespaceContext ------------------------------------------------------------------

CypherParser::OC_NamespaceContext::OC_NamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::OC_NamespaceContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_NamespaceContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}


size_t CypherParser::OC_NamespaceContext::getRuleIndex() const {
  return CypherParser::RuleOC_Namespace;
}

void CypherParser::OC_NamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Namespace(this);
}

void CypherParser::OC_NamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Namespace(this);
}


std::any CypherParser::OC_NamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Namespace(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_NamespaceContext* CypherParser::oC_Namespace() {
  OC_NamespaceContext *_localctx = _tracker.createInstance<OC_NamespaceContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_Namespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1469);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1464);
        oC_SymbolicName();
        setState(1465);
        match(CypherParser::T__22); 
      }
      setState(1471);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}

void CypherParser::OC_VariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Variable(this);
}

void CypherParser::OC_VariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Variable(this);
}


std::any CypherParser::OC_VariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Variable(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1472);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::OC_MapLiteralContext* CypherParser::OC_LiteralContext::oC_MapLiteral() {
  return getRuleContext<CypherParser::OC_MapLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}

void CypherParser::OC_LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Literal(this);
}

void CypherParser::OC_LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Literal(this);
}


std::any CypherParser::OC_LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Literal(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1480);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 1);
        setState(1474);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 2);
        setState(1475);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::HexInteger:
      case CypherParser::DecimalInteger:
      case CypherParser::OctalInteger:
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 3);
        setState(1476);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 4);
        setState(1477);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::T__7: {
        enterOuterAlt(_localctx, 5);
        setState(1478);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__23: {
        enterOuterAlt(_localctx, 6);
        setState(1479);
        oC_MapLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}

void CypherParser::OC_BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_BooleanLiteral(this);
}

void CypherParser::OC_BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_BooleanLiteral(this);
}


std::any CypherParser::OC_BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_BooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1482);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}

void CypherParser::OC_NumberLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_NumberLiteral(this);
}

void CypherParser::OC_NumberLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_NumberLiteral(this);
}


std::any CypherParser::OC_NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_NumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1486);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1484);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::HexInteger:
      case CypherParser::DecimalInteger:
      case CypherParser::OctalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(1485);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::HexInteger() {
  return getToken(CypherParser::HexInteger, 0);
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::OctalInteger() {
  return getToken(CypherParser::OctalInteger, 0);
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}

void CypherParser::OC_IntegerLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_IntegerLiteral(this);
}

void CypherParser::OC_IntegerLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_IntegerLiteral(this);
}


std::any CypherParser::OC_IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_IntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_IntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1488);
    _la = _input->LA(1);
    if (!(((((_la - 95) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 95)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::ExponentDecimalReal() {
  return getToken(CypherParser::ExponentDecimalReal, 0);
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}

void CypherParser::OC_DoubleLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_DoubleLiteral(this);
}

void CypherParser::OC_DoubleLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_DoubleLiteral(this);
}


std::any CypherParser::OC_DoubleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_DoubleLiteral(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_DoubleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1490);
    _la = _input->LA(1);
    if (!(_la == CypherParser::ExponentDecimalReal

    || _la == CypherParser::RegularDecimalReal)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}

void CypherParser::OC_ListLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ListLiteral(this);
}

void CypherParser::OC_ListLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ListLiteral(this);
}


std::any CypherParser::OC_ListLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListLiteral(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1492);
    match(CypherParser::T__7);
    setState(1494);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1493);
      match(CypherParser::SP);
    }
    setState(1513);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 140737573028160) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 343051394343361) != 0)) {
      setState(1496);
      oC_Expression();
      setState(1498);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1497);
        match(CypherParser::SP);
      }
      setState(1510);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__1) {
        setState(1500);
        match(CypherParser::T__1);
        setState(1502);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1501);
          match(CypherParser::SP);
        }
        setState(1504);
        oC_Expression();
        setState(1506);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1505);
          match(CypherParser::SP);
        }
        setState(1512);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1515);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MapLiteralContext ------------------------------------------------------------------

CypherParser::OC_MapLiteralContext::OC_MapLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_MapLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MapLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::OC_MapLiteralContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_MapLiteralContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_MapLiteralContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_MapLiteralContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::OC_MapLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_MapLiteral;
}

void CypherParser::OC_MapLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_MapLiteral(this);
}

void CypherParser::OC_MapLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_MapLiteral(this);
}


std::any CypherParser::OC_MapLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_MapLiteral(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_MapLiteralContext* CypherParser::oC_MapLiteral() {
  OC_MapLiteralContext *_localctx = _tracker.createInstance<OC_MapLiteralContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_MapLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1517);
    match(CypherParser::T__23);
    setState(1519);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1518);
      match(CypherParser::SP);
    }
    setState(1554);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1729452625654448128) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1441116715713822719) != 0)) {
      setState(1521);
      oC_PropertyKeyName();
      setState(1523);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1522);
        match(CypherParser::SP);
      }
      setState(1525);
      match(CypherParser::T__9);
      setState(1527);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1526);
        match(CypherParser::SP);
      }
      setState(1529);
      oC_Expression();
      setState(1531);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1530);
        match(CypherParser::SP);
      }
      setState(1551);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__1) {
        setState(1533);
        match(CypherParser::T__1);
        setState(1535);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1534);
          match(CypherParser::SP);
        }
        setState(1537);
        oC_PropertyKeyName();
        setState(1539);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1538);
          match(CypherParser::SP);
        }
        setState(1541);
        match(CypherParser::T__9);
        setState(1543);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1542);
          match(CypherParser::SP);
        }
        setState(1545);
        oC_Expression();
        setState(1547);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1546);
          match(CypherParser::SP);
        }
        setState(1553);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1556);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}

void CypherParser::OC_PropertyKeyNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_PropertyKeyName(this);
}

void CypherParser::OC_PropertyKeyNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_PropertyKeyName(this);
}


std::any CypherParser::OC_PropertyKeyNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyKeyName(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1558);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}

void CypherParser::OC_ParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Parameter(this);
}

void CypherParser::OC_ParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Parameter(this);
}


std::any CypherParser::OC_ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Parameter(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1560);
    match(CypherParser::T__25);
    setState(1563);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COUNT:
      case CypherParser::ANY:
      case CypherParser::NONE:
      case CypherParser::SINGLE:
      case CypherParser::HexLetter:
      case CypherParser::FILTER:
      case CypherParser::EXTRACT:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1561);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(1562);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ReservedWordContext* CypherParser::OC_SchemaNameContext::oC_ReservedWord() {
  return getRuleContext<CypherParser::OC_ReservedWordContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}

void CypherParser::OC_SchemaNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_SchemaName(this);
}

void CypherParser::OC_SchemaNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_SchemaName(this);
}


std::any CypherParser::OC_SchemaNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_SchemaName(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1567);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COUNT:
      case CypherParser::ANY:
      case CypherParser::NONE:
      case CypherParser::SINGLE:
      case CypherParser::HexLetter:
      case CypherParser::FILTER:
      case CypherParser::EXTRACT:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1565);
        oC_SymbolicName();
        break;
      }

      case CypherParser::UNION:
      case CypherParser::ALL:
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH:
      case CypherParser::UNWIND:
      case CypherParser::AS:
      case CypherParser::MERGE:
      case CypherParser::ON:
      case CypherParser::CREATE:
      case CypherParser::SET:
      case CypherParser::DETACH:
      case CypherParser::DELETE:
      case CypherParser::REMOVE:
      case CypherParser::WITH:
      case CypherParser::RETURN:
      case CypherParser::DISTINCT:
      case CypherParser::ORDER:
      case CypherParser::BY:
      case CypherParser::L_SKIP:
      case CypherParser::LIMIT:
      case CypherParser::ASCENDING:
      case CypherParser::ASC:
      case CypherParser::DESCENDING:
      case CypherParser::DESC:
      case CypherParser::WHERE:
      case CypherParser::OR:
      case CypherParser::XOR:
      case CypherParser::AND:
      case CypherParser::NOT:
      case CypherParser::STARTS:
      case CypherParser::ENDS:
      case CypherParser::CONTAINS:
      case CypherParser::IN:
      case CypherParser::IS:
      case CypherParser::NULL_:
      case CypherParser::CASE:
      case CypherParser::ELSE:
      case CypherParser::END:
      case CypherParser::WHEN:
      case CypherParser::THEN:
      case CypherParser::EXISTS:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::CONSTRAINT:
      case CypherParser::DO:
      case CypherParser::FOR:
      case CypherParser::REQUIRE:
      case CypherParser::UNIQUE:
      case CypherParser::MANDATORY:
      case CypherParser::SCALAR:
      case CypherParser::OF:
      case CypherParser::ADD:
      case CypherParser::DROP: {
        enterOuterAlt(_localctx, 2);
        setState(1566);
        oC_ReservedWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReservedWordContext ------------------------------------------------------------------

CypherParser::OC_ReservedWordContext::OC_ReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::REMOVE() {
  return getToken(CypherParser::REMOVE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::SET() {
  return getToken(CypherParser::SET, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::AND() {
  return getToken(CypherParser::AND, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::AS() {
  return getToken(CypherParser::AS, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::IN() {
  return getToken(CypherParser::IN, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::OR() {
  return getToken(CypherParser::OR, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::XOR() {
  return getToken(CypherParser::XOR, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::CONSTRAINT() {
  return getToken(CypherParser::CONSTRAINT, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::DO() {
  return getToken(CypherParser::DO, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::FOR() {
  return getToken(CypherParser::FOR, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::REQUIRE() {
  return getToken(CypherParser::REQUIRE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::UNIQUE() {
  return getToken(CypherParser::UNIQUE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::MANDATORY() {
  return getToken(CypherParser::MANDATORY, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::SCALAR() {
  return getToken(CypherParser::SCALAR, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::OF() {
  return getToken(CypherParser::OF, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

tree::TerminalNode* CypherParser::OC_ReservedWordContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}


size_t CypherParser::OC_ReservedWordContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReservedWord;
}

void CypherParser::OC_ReservedWordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_ReservedWord(this);
}

void CypherParser::OC_ReservedWordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_ReservedWord(this);
}


std::any CypherParser::OC_ReservedWordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReservedWord(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_ReservedWordContext* CypherParser::oC_ReservedWord() {
  OC_ReservedWordContext *_localctx = _tracker.createInstance<OC_ReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_ReservedWord);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1569);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1729452625654448128) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 35993614558953471) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::FILTER() {
  return getToken(CypherParser::FILTER, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EXTRACT() {
  return getToken(CypherParser::EXTRACT, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::ANY() {
  return getToken(CypherParser::ANY, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::NONE() {
  return getToken(CypherParser::NONE, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::SINGLE() {
  return getToken(CypherParser::SINGLE, 0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}

void CypherParser::OC_SymbolicNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_SymbolicName(this);
}

void CypherParser::OC_SymbolicNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_SymbolicName(this);
}


std::any CypherParser::OC_SymbolicNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_SymbolicName(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_SymbolicName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1571);
    _la = _input->LA(1);
    if (!(((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 2680059625921) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}

void CypherParser::OC_LeftArrowHeadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_LeftArrowHead(this);
}

void CypherParser::OC_LeftArrowHeadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_LeftArrowHead(this);
}


std::any CypherParser::OC_LeftArrowHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_LeftArrowHead(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1573);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013282304) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}

void CypherParser::OC_RightArrowHeadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_RightArrowHead(this);
}

void CypherParser::OC_RightArrowHeadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_RightArrowHead(this);
}


std::any CypherParser::OC_RightArrowHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_RightArrowHead(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1575);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212287488) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}

void CypherParser::OC_DashContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOC_Dash(this);
}

void CypherParser::OC_DashContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CypherListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOC_Dash(this);
}


std::any CypherParser::OC_DashContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<CypherVisitor*>(visitor))
    return parserVisitor->visitOC_Dash(this);
  else
    return visitor->visitChildren(this);
}

CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1577);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384963584) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
